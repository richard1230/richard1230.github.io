<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[Differences between Interfaces and Type Aliases]]></title>
      <url>/typescript/2022/03/06/differ-interface-type/</url>
      <content type="html"><![CDATA[<p>Type aliases and interfaces are very similar, and in many cases you can choose between them freely.</p>

<p>Almost all features of an <strong>interface</strong> are available in <strong>type</strong>, the key distinction is that a type cannot be re-opened to add new properties vs an interface which is always extendable.</p>
<h3 id="type">Type:</h3>
<ul>
  <li>Easy way to refer to the different properties + functions that a value has</li>
</ul>

<h4 id="primitive-types">Primitive Types</h4>
<ul>
  <li>number</li>
  <li>boolean</li>
  <li>void</li>
  <li>undefined</li>
  <li>string</li>
  <li>symbol</li>
  <li>null
    <h4 id="object-types">Object Types</h4>
  </li>
  <li>functions</li>
  <li>arrays</li>
  <li>classes</li>
  <li>objects</li>
</ul>

<h3 id="interface">Interface:</h3>
<ul>
  <li>
    <h3 id="extending-an-interface">Extending an interface</h3>
    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Animal</span> <span class="p">{</span>
    <span class="nl">name</span><span class="p">:</span><span class="kr">string</span>
<span class="p">}</span>
    
<span class="kr">interface</span> <span class="nx">Bear</span> <span class="kd">extends</span> <span class="nx">Animal</span> <span class="p">{</span>
    <span class="nl">honey</span><span class="p">:</span> <span class="nx">boolean</span>
<span class="p">}</span>
    
<span class="kd">const</span> <span class="nx">bear</span> <span class="o">=</span> <span class="nx">getBear</span><span class="p">()</span>
<span class="nx">bear</span><span class="p">.</span><span class="nx">name</span>
<span class="nx">bear</span><span class="p">.</span><span class="nx">honey</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="extending-a-type-via-intersections">Extending a type via intersections</h3>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">type</span> <span class="nx">Animal</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span><span class="kr">string</span>
    <span class="p">}</span>
    
    <span class="kd">type</span> <span class="nx">Bear</span> <span class="o">=</span> <span class="nx">Animal</span> <span class="o">&amp;</span> <span class="p">{</span>
        <span class="na">honey</span><span class="p">:</span> <span class="nx">boolean</span>
    <span class="p">}</span>
    
    <span class="kd">const</span> <span class="nx">bear</span> <span class="o">=</span> <span class="nx">getBear</span><span class="p">()</span>
    <span class="nx">bear</span><span class="p">.</span><span class="nx">name</span>
    <span class="nx">bear</span><span class="p">.</span><span class="nx">honey</span>
</code></pre></div></div>

<h3 id="adding-new-fields-to-an-existing-interface">Adding new fields to an existing interface</h3>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kr">interface</span> <span class="nx">Window</span> <span class="p">{</span>
	<span class="nl">title</span><span class="p">:</span> <span class="kr">string</span>
<span class="p">}</span>
  <span class="kr">interface</span> <span class="nx">Window</span> <span class="p">{</span>
	<span class="nl">ts</span><span class="p">:</span> <span class="nx">TypeScriptAPI</span>
  <span class="p">}</span>

</code></pre></div></div>

<h3 id="a-type-cannot-be-changed-after-being-created">A type cannot be changed after being created</h3>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">type</span> <span class="nx">Window</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">title</span><span class="p">:</span><span class="kr">string</span>
<span class="p">}</span>

  <span class="kd">type</span> <span class="nx">Window</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">ts</span><span class="p">:</span> <span class="nx">TypeScriptAPI</span>
  <span class="p">}</span>
<span class="c1">// Error: Duplicate identifier 'Window'.</span>

</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Typescript </category>
        
      </categories>
      <tags>
        
          <tag> Typescript </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Center Div in the Grid]]></title>
      <url>/css/2022/01/22/grid_center_div/</url>
      <content type="html"><![CDATA[<h3 id="this-is-driving-me-crazy-so-here-is-the-code-snippet-will-often-use-in-the-future">This is driving me crazy~! So here is the code snippet will often use in the future.</h3>

<ul>
  <li>The first style</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">div</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">grid</span><span class="p">;</span>
    <span class="py">grid-template-columns</span><span class="p">:</span> <span class="m">1</span><span class="n">fr</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
    <span class="py">gap</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span>
    <span class="py">justify-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="nl">align-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>The second style</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">div</span> <span class="p">{</span>
    <span class="nl">margin-top</span><span class="p">:</span> <span class="m">5vh</span><span class="p">;</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">grid</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">57vh</span><span class="p">;</span>
    <span class="py">grid-template-columns</span><span class="p">:</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
    <span class="py">grid-template-rows</span><span class="p">:</span> <span class="m">1</span><span class="n">fr</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
    <span class="py">gap</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> CSS </category>
        
      </categories>
      <tags>
        
          <tag> CSS </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Remove Element]]></title>
      <url>/algorithm/2022/01/12/remove_element/</url>
      <content type="html"><![CDATA[<h4 id="description">Description</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.
Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.
Return k after placing the final result in the first k slots of nums.
Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int val = ...; // Value to remove
int[] expectedNums = [...]; // The expected answer with correct length.
// It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, 0, k); // Sort the first k elements of nums
for (int i = 0; i &lt; actualLength; i++) {
assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.


Example 1:

Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).

Example 2:

Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).
</code></pre></div></div>

<h4 id="thinking">Thinking</h4>

<ol>
  <li>After reading the problem more carefully, it’s quite important that the original nums array should hold the first k elements of nums.</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">removeElement</span> <span class="o">=</span> <span class="p">(</span><span class="nx">nums</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">nums</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span>
  
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">val</span><span class="p">){</span>
      <span class="c1">// because count will add 1 before the next for loop</span>
      <span class="c1">// so the final count which will be returned is always equal to the length of the final nums array</span>
      <span class="nx">nums</span><span class="p">[</span><span class="nx">count</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">count</span>
<span class="p">}</span>

</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Implement stStr()]]></title>
      <url>/algorithm/2022/01/12/implement_strStr/</url>
      <content type="html"><![CDATA[<h4 id="description">Description</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Implement strStr().
Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Clarification:
What should we return when needle is an empty string? This is a great question to ask during an interview.
For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().


Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1
Example 3:

Input: haystack = "", needle = ""
Output: 0
Constraints:

0 &lt;= haystack.length, needle.length &lt;= 5 * 104
haystack and needle consist of only lower-case English characters.
</code></pre></div></div>

<h4 id="thinking">Thinking</h4>

<ol>
  <li>traverse the haystack string, find out if there is the one letter equal the first letter in the needle string</li>
  <li>if true, we can slice the length that equal to the needle string from the letter we found in the haystack, compare
them</li>
  <li>if equal the index</li>
  <li>otherwise, we always return -1</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cm">/**
 * @param {string} haystack
 * @param {string} needle
 * @return {number}
 */</span>

<span class="kd">let</span> <span class="nx">strStr</span> <span class="o">=</span> <span class="p">(</span><span class="nx">haystack</span><span class="p">,</span> <span class="nx">needle</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">needle</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span>
    <span class="kd">let</span> <span class="nx">initial</span> <span class="o">=</span> <span class="nx">needle</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">haystack</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">haystack</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">initial</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">haystack</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="nx">needle</span><span class="p">.</span><span class="nx">length</span><span class="p">))</span> <span class="o">===</span> <span class="nx">needle</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">i</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
  <span class="p">}</span>
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Remove Duplicated from Sorted Array]]></title>
      <url>/algorithm/2022/01/11/remove_duplicated/</url>
      <content type="html"><![CDATA[<h4 id="description">Description</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.
Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.
Return k after placing the final result in the first k slots of nums.
Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.
</code></pre></div></div>

<p>Example 1:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
</code></pre></div></div>

<p>Example 2:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
</code></pre></div></div>

<h4 id="thinking">Thinking</h4>
<ol>
  <li>Declare two variables, pointer1 and pointer2</li>
  <li>pointer1 records the first position of the number in the array</li>
  <li>pointer2 records the position of the latest duplicated number appeared in the array</li>
  <li>traverse array, check if pointer1 is equal to pointer2,</li>
  <li>if true, move pointer2 to the next index position</li>
  <li>if false, which means the number in the pointer2 position is unique, we need to move the unique number to the front</li>
  <li>so, we move pointer1 to the next index position, and give the latest value in the pointer2 position to the new pointer1 position</li>
  <li>until the loop end, we can return the pointer1+1, since we need to total count of the unique numbers in the array, pointer1 is just the index</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/**
     * @param {number[]} nums
     * @return {number}
     */</span>
    
    <span class="kd">let</span> <span class="nx">removeDuplicates</span> <span class="o">=</span> <span class="p">(</span><span class="nx">nums</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">nums</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span>
    <span class="kd">let</span> <span class="nx">pointer1</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">pointer2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">pointer2</span> <span class="o">&lt;</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">pointer2</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">nums</span><span class="p">[</span><span class="nx">pointer1</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">pointer2</span><span class="p">]){</span>
        <span class="c1">// when the numbers are not equal,  we need to give the value of nums[pointer2] to the new nums[pointer1]</span>
        <span class="nx">pointer1</span><span class="o">++</span>
        <span class="nx">nums</span><span class="p">[</span><span class="nx">pointer1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">pointer2</span><span class="p">]</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// pointer1 is index, but the problem needs us return the count of the unique numbers in the array</span>
    <span class="k">return</span> <span class="nx">pointer1</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="p">}</span>

</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Merge Two Sorted Lists]]></title>
      <url>/algorithm/2022/01/10/merge_two_sorted_lists/</url>
      <content type="html"><![CDATA[<h4 id="description">Description</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You are given the heads of two sorted linked lists 'list1' and 'list2'.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes 
of the first two lists.

Return the head of the merged linked list.
</code></pre></div></div>

<p><img src="../../../../../assets/images/merge_2_sorted.jpeg" width="500" alt="Domain Name" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Example 1:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: list1 = [], list2 = []
Output: []

Example 3:
Input: list1 = [], list2 = [0]
Output: [0]

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 &lt;= Node.val &lt;= 100
Both list1 and list2 are sorted in non-decreasing order.
</code></pre></div></div>

<h4 id="thinking">Thinking</h4>

<h5 id="solution-1-without-the-recursion">Solution 1 (Without the recursion)</h5>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Definition for singly-linked list.</span>
<span class="kd">function</span> <span class="nx">ListNode</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">val</span> <span class="o">=</span> <span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="p">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="nx">val</span><span class="p">)</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="p">(</span><span class="nx">next</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="p">?</span> <span class="kc">null</span> <span class="p">:</span> <span class="nx">next</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/**
 * @param {ListNode} list1
 * @param {ListNode} list2
 * @return {ListNode}
 */</span>

<span class="kd">const</span> <span class="nx">mergeTwoLists</span> <span class="o">=</span> <span class="p">(</span><span class="nx">l1</span><span class="p">,</span> <span class="nx">l2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// initialize a LinkedList node with a dummy Node as the head</span>
  <span class="kd">let</span> <span class="nx">dummyNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ListNode</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

  <span class="c1">// manitain a reference to the dummyNode head</span>
  <span class="kd">let</span> <span class="nx">head</span> <span class="o">=</span> <span class="nx">dummyNode</span>

  <span class="c1">// while both of passed nodes l1 and l2 has value</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">l1</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nx">l2</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">l1</span><span class="p">.</span><span class="nx">val</span> <span class="o">&lt;=</span> <span class="nx">l2</span><span class="p">.</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// if l1 is smaller, point the dummyNode to the l1</span>
      <span class="nx">dummyNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">l1</span> 

      <span class="c1">// get the next value of l1 list</span>
      <span class="nx">l1</span> <span class="o">=</span> <span class="nx">l1</span><span class="p">.</span><span class="nx">next</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="c1">// if l2 is smaller, point the dummyNode to the l2</span>
      <span class="nx">dummyNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">l2</span>

      <span class="c1">// get the next value of l2 list</span>
      <span class="nx">l2</span> <span class="o">=</span> <span class="nx">l2</span><span class="p">.</span><span class="nx">next</span>
    <span class="p">}</span>

    <span class="c1">// move into the next level of the linkedlist for the next iteration</span>
    <span class="nx">dummyNode</span> <span class="o">=</span> <span class="nx">dummyNode</span><span class="p">.</span><span class="nx">next</span>
  <span class="p">}</span>
  
  <span class="c1">// if l1 has run out of elements</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">l1</span> <span class="o">===</span> <span class="kc">null</span><span class="p">){</span>
    <span class="nx">dummyNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">l2</span>
  <span class="p">}</span>
  <span class="c1">// if l2 has run out of elements</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">l2</span> <span class="o">===</span> <span class="kc">null</span><span class="p">){</span>
    <span class="nx">dummyNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">l1</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">head</span><span class="p">.</span><span class="nx">next</span>
<span class="p">}</span>
</code></pre></div></div>

<h5 id="solution-2-with-the-recursion">Solution 2 (With the recursion)</h5>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Definition for singly-linked list.</span>
<span class="kd">function</span> <span class="nx">ListNode</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">val</span> <span class="o">=</span> <span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="p">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="nx">val</span><span class="p">)</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="p">(</span><span class="nx">next</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="p">?</span> <span class="kc">null</span> <span class="p">:</span> <span class="nx">next</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/**
 * @param {ListNode} list1
 * @param {ListNode} list2
 * @return {ListNode}
 */</span>

<span class="kd">const</span> <span class="nx">mergeTwoLists</span> <span class="o">=</span> <span class="p">(</span><span class="nx">l1</span><span class="p">,</span> <span class="nx">l2</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
  <span class="c1">// if either list is empty return the other one</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">l1</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="k">return</span> <span class="nx">l2</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">l2</span><span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="k">return</span> <span class="nx">l1</span>
  
  <span class="k">if</span><span class="p">(</span><span class="nx">l1</span><span class="p">.</span><span class="nx">val</span> <span class="o">&lt;=</span> <span class="nx">l2</span><span class="p">.</span><span class="nx">val</span><span class="p">){</span>
    <span class="nx">l1</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">mergeTwoLists</span><span class="p">(</span><span class="nx">l1</span><span class="p">.</span><span class="nx">next</span><span class="p">,</span> <span class="nx">l2</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">l1</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="nx">l2</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">mergeTwoLists</span><span class="p">(</span><span class="nx">l1</span><span class="p">,</span><span class="nx">l2</span><span class="p">.</span><span class="nx">next</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="running-time">Running Time</h4>
<ul>
  <li>This algorithm runs in O(n+m) time, where n and m are the lengths of respective linked lists. This is the running time because to merge both linked lists into one, we need to iterate through each node in the list</li>
</ul>

<h5 id="ddetailed-explanation-with-graph">dDetailed explanation with graph</h5>
<p><img src="../../../../../assets/images/Merge-Two-Sorted-LinkedLists.jpeg" width="800" alt="Domain Name" /></p>

]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Valid Parentheses]]></title>
      <url>/algorithm/2022/01/09/valid_parentheses/</url>
      <content type="html"><![CDATA[<h4 id="description">Description</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false

Constraints:
1 &lt;= s.length &lt;= 104
s consists of parentheses only '()[]{}'.
</code></pre></div></div>

<h4 id="thinking">Thinking</h4>
<ul>
  <li>use stack to store each item in the s string array</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// create a map</span>
<span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="p">{</span>
  <span class="dl">'</span><span class="s1">)</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">(</span><span class="dl">'</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">]</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">[</span><span class="dl">'</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">}</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">{</span><span class="dl">'</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">isValid</span> <span class="o">=</span> <span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">stack</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// when find the open parentheses push to the stack</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">(</span><span class="dl">'</span> <span class="o">||</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">{</span><span class="dl">'</span> <span class="o">||</span> <span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">[</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">stack</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
      
      <span class="c1">// when we find there is the counterpart of one kind of the parentheses</span>
      <span class="c1">// compare the last item in the stack with the map's value</span>
      <span class="c1">// if equal, it means we find the pair of parentheses</span>
      <span class="c1">// if not equal, we didn't find any pair of parentheses</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">stack</span><span class="p">[</span><span class="nx">stack</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="nx">map</span><span class="p">[</span><span class="nx">s</span><span class="p">[</span><span class="nx">i</span><span class="p">]])</span> <span class="p">{</span>
      <span class="nx">stack</span><span class="p">.</span><span class="nx">pop</span><span class="p">()</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kc">false</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="o">!</span><span class="nx">stack</span><span class="p">.</span><span class="nx">length</span>
<span class="p">}</span>

</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Longest Common Prefix]]></title>
      <url>/algorithm/2022/01/08/longest_common_prefix/</url>
      <content type="html"><![CDATA[<h4 id="description">Description</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string "".

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.


Constraints:

1 &lt;= strs.length &lt;= 200
0 &lt;= strs[i].length &lt;= 200
strs[i] consists of only lower-case English letters.
</code></pre></div></div>

<h4 id="thinking">Thinking</h4>
<ul>
  <li>Take the first item as the prefix, then compare with the next one with’ indexOf()’ method, if the prefix exists then compare it with the next one.  if the prefix not exists, reduce one character to continue to compare.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">longestCommonPrefix</span> <span class="o">=</span> <span class="p">(</span><span class="nx">strs</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">longestPrefix</span> <span class="o">=</span> <span class="dl">''</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">strs</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">|</span> <span class="nx">strs</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">longestPrefix</span>

  <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="c1">// loop through the first string in the strs array</span>
  <span class="c1">// then compare each letter of remaining strings in the array </span>
  <span class="c1">// important: consider the index outofBound, not every string item length in the strs array greater than index while in the loop</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">comparisonLetter</span> <span class="k">of</span> <span class="nx">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">]){</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">strs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
      <span class="c1">// string[0][comparisonIndex]: each letter in the first string of strs array</span>
      <span class="c1">// strs[i].chartAt(inedx): each letter in the remaining string </span>

      <span class="kd">let</span> <span class="nx">currentWord</span> <span class="o">=</span> <span class="nx">strs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
      <span class="kd">let</span> <span class="nx">currentLetter</span> <span class="o">=</span> <span class="nx">currentWord</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">&gt;</span> <span class="nx">currentWord</span><span class="p">.</span><span class="nx">length</span> <span class="o">||</span> <span class="nx">currentLetter</span> <span class="o">!==</span> <span class="nx">comparisonLetter</span><span class="p">)</span>
      <span class="p">{</span>
        <span class="k">return</span> <span class="nx">longestPrefix</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// since we use the vertical comparison method, so we need to do the below step outside the inner for loop</span>
    <span class="nx">longestPrefix</span> <span class="o">+=</span> <span class="nx">comparisonLetter</span>
    <span class="nx">index</span><span class="o">++</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">longestPrefix</span>
<span class="p">};</span>
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Roman To Integer]]></title>
      <url>/algorithm/2022/01/07/roman_to_integer/</url>
      <content type="html"><![CDATA[<h4 id="description">Description</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.
Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:
I can be placed before V (5) and X (10) to make 4 and 9.
X can be placed before L (50) and C (100) to make 40 and 90.
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.
Example 1:

Input: s = "III"
Output: 3
Explanation: III = 3.
Example 2:

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 3:

Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
Constraints:

1 &lt;= s.length &lt;= 15
s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
It is guaranteed that s is a valid roman numeral in the range [1, 3999].
</code></pre></div></div>

<h4 id="thinking">Thinking:</h4>
<ul>
  <li>Always forgot to return the total value</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">const</span> <span class="nx">RomanMap</span><span class="o">=</span><span class="p">{</span>
  <span class="dl">'</span><span class="s1">I</span><span class="dl">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">V</span><span class="dl">'</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">X</span><span class="dl">'</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">L</span><span class="dl">'</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">C</span><span class="dl">'</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">D</span><span class="dl">'</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">M</span><span class="dl">'</span><span class="p">:</span><span class="mi">1000</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">romanToInt</span> <span class="o">=</span> <span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">=&gt;</span><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="kd">let</span> <span class="nx">currentNum</span> <span class="o">=</span> <span class="nx">RomanMap</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">)]</span>
    <span class="kd">let</span> <span class="nx">nextNum</span> <span class="o">=</span> <span class="nx">RomanMap</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>

    <span class="k">if</span><span class="p">(</span><span class="nx">nextNum</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">currentNum</span> <span class="o">&gt;=</span> <span class="nx">nextNum</span><span class="p">){</span>
        <span class="nx">total</span> <span class="o">+=</span> <span class="nx">currentNum</span>
      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="nx">total</span> <span class="o">+=</span> <span class="p">(</span><span class="nx">nextNum</span><span class="o">-</span><span class="nx">currentNum</span><span class="p">)</span>
        <span class="nx">i</span><span class="o">++</span>
      <span class="p">}</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nx">total</span> <span class="o">+=</span><span class="nx">currentNum</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">total</span>
<span class="p">};</span>

</code></pre></div></div>

<p><img src="../../../../../assets/images/RomanToInteger.png" width="500" alt="Domain Name" /></p>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Palindrome Number]]></title>
      <url>/algorithm/2022/01/06/palindrome/</url>
      <content type="html"><![CDATA[<h4 id="description">Description</h4>

<blockquote>
  <p>Given an integer x, return true if x is palindrome integer.
An integer is a palindrome when it reads the same backward as forward.
For example, 121 is a palindrome while 123 is not.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Example 1:
Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">isPalindrome</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">===</span> <span class="nx">reversedInteger</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">reversedInteger</span> <span class="o">=</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
  <span class="c1">// declare a temporary container to store the reversed digits from x one by one</span>
  <span class="kd">const</span> <span class="nx">reversed</span> <span class="o">=</span> <span class="mi">0</span>
  
  <span class="c1">// truncate the digidts from Ones digit to Hundreds digit of x, </span>
  <span class="c1">// x needs greater than 0 after each truncate</span>
  <span class="k">while</span><span class="p">(</span><span class="nx">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
    <span class="c1">// key point: 'reversed' is the iterator</span>
    <span class="c1">// the % module function is used to get the number from Ones digit</span>
    <span class="c1">// 用取模工具依次取个位数，十位数，百位数</span>
    <span class="nx">reversed</span> <span class="o">=</span> <span class="nx">reversed</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="nx">x</span><span class="o">%</span><span class="mi">10</span>
    
    <span class="c1">// this is used to remove the Ones digit from the x, </span>
    <span class="c1">// and x will be a new shorter number and will be used the next time </span>
    <span class="c1">// 然后 用Math.floor获截取个位数之后的值，直到最后都截取完</span>
    <span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">x</span><span class="o">/</span><span class="mi">10</span><span class="p">)</span>
  <span class="p">}</span>
  
  <span class="k">return</span> <span class="nx">reversed</span>
<span class="p">}</span>
</code></pre></div></div>

]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
          <tag> Leetcode </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Two Sum]]></title>
      <url>/algorithm/2022/01/05/two_sum/</url>
      <content type="html"><![CDATA[<h4 id="description">Description:</h4>

<blockquote>
  <p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have <strong><em>exactly one solution</em></strong>, and you may <strong><em>not use the same element twice</em></strong>.
You can return the answer in any order.</p>
</blockquote>

<h4 id="thinking">Thinking:</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">twoSum</span> <span class="o">=</span> <span class="p">(</span><span class="nx">nums</span><span class="p">,</span> <span class="nx">target</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// create an  Object Dictionary</span>
  <span class="kd">const</span> <span class="nx">exsitedHash</span> <span class="o">=</span> <span class="p">{}</span>

  <span class="c1">//loop through the array 'nums'，we need to store the index of nums as the value and the num as the key in the Object Dictionary</span>
  
  <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="p">[</span><span class="nx">index</span><span class="p">,</span> <span class="nx">num</span><span class="p">]</span> <span class="k">of</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">entries</span><span class="p">())</span> <span class="p">{</span>
    <span class="c1">//check if the curremt item in the Object Dictionary has a value(the index in the nums)</span>
    
    <span class="c1">// if the value(the index in the nums) exists, it means current item has a previous counterpart, their sum is equalto the target,</span>
    <span class="c1">// we can return the value(the index in the nums) of current item in the Object Dictionary and the index of previous counterpart item in the nums array</span>
   
    <span class="c1">// if the vlaue(the index in the nums) is not exist, store the value(the index in the nums)</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">exsitedHash</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">[</span><span class="nx">exsitedHash</span><span class="p">[</span><span class="nx">num</span><span class="p">],</span> <span class="nx">index</span><span class="p">]</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nx">existedHash</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span><span class="o">=</span><span class="nx">index</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
          <tag> Leetcode </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[搜集的在加拿大找工作的Tips]]></title>
      <url>/job%20hunting/2022/01/02/job_hunting_preparation/</url>
      <content type="html"><![CDATA[<h3 id="零工作经验的毕业生">零工作经验的毕业生</h3>

<ol>
  <li>疫情期间竞争会大很多，有人投了超过 100 多份简历，只有三轮进入下一轮笔试机会。只有通过不断润色我们的 portfolio 作品集，通过简历筛选的机会更大。</li>
  <li>有可能找到的公司规模相对比较小，工作内容可能跟预期有差距。</li>
  <li>生活好难,大家加油 💪</li>
</ol>

<h3 id="笔试部分">笔试部分</h3>

<h4 id="形式">形式</h4>

<ol>
  <li>第一种是直接考 coding。倾向于 software developer 这类性质的工作。考试会让你 share 屏幕，对方看着你整个输入的过程，考难度级别是 Leetcode 里 easy 级别的题目。 有些不共享屏幕的，但是也有限时 coding
question，难度会有 leetcode 里面的 medium 的级别。</li>
  <li>第二种是做 assignment，前端工程师需要管 UX/UI Design?. 这类 Assignment 大概有一周的时间给你做，会要求重新设计一个页面，然后完成里面 js 的 function，或者给 mockup 设计稿，按照设计实现网页功能</li>
</ol>

<h3 id="面试部分">面试部分</h3>

<h4 id="形式-1">形式</h4>

<ol>
  <li>问 Behaviour Question. 考核在工作中遇到的各种情景的应对方式，考核笔试项目是不是你本人做的。</li>
  <li>这类面试看中英语口语沟通能力，看处理问题的方式是否符合企业文化。</li>
</ol>

<h3 id="做好准备投简历可能会投好几个月">做好准备，投简历可能会投好几个月</h3>

<ul>
  <li>可能投了好几个月的简历，面试机会寥寥无几</li>
</ul>

<h3 id="投简历需要知道的经验">投简历需要知道的经验</h3>

<ul>
  <li>基本上 95%的公司都要求工作经验,有些 1-2 年，甚至 5 年工作经验。</li>
  <li>要求 3 年以上工作经验的就不用看了，目标最好锁定在 1-2 年
    <ul>
      <li>虽然在学校 2 年期间是学习，但也一直是前端领域，加上自己的项目以及实习经验，这可以算是两年经验</li>
      <li>大部分写着要求 1-2 年工作经验的职位，基本上是门槛没那么高的，因为从招聘角度来说，总不能说零工作经验要求吧， 所以 1-2 年的招聘要去机会比较大。</li>
    </ul>
  </li>
</ul>

<h3 id="投简历常用平台">投简历常用平台</h3>

<ul>
  <li>Resource: <a href="https://careersherpa.net/best-job-search-websites/">33 Best Job Search Websites To Use In 2022</a></li>
  <li>Individual company websites</li>
  <li>Angellist</li>
  <li>Indeed (沉底的几率大)</li>
  <li>Glassdoor</li>
  <li>Job bank</li>
  <li>Monster</li>
  <li>FlexJobs</li>
  <li>Ladders</li>
  <li>AngeIList</li>
  <li>Linkedin(沉底的几率大)</li>
  <li>Getwork</li>
  <li>Scouted</li>
  <li>Snagajob</li>
  <li>Robert Half</li>
  <li>CareerBuilder</li>
  <li>Eluta</li>
  <li>Jobboom</li>
  <li>Simply Hired</li>
  <li>Google for jobs</li>
  <li>ZipRecruiter</li>
  <li>Workopolis</li>
</ul>

<h3 id="关于-linkedin">关于 Linkedin</h3>

<ul>
  <li>LinkedIn
上面发布的职位都很诱人，就是你感觉各个方面都很符合自己的条件，但是对我来说是零回复率，虽然很多教你怎么找工作的过来人都说维护好 linkdin 的账号很重要，但是对于零职场经验的小白来说，怎么拓展人脉，怎么打包美化你的个人介绍作用都不大。我认为 linkdin
是比较适合有了职场经验后的 networking 的，当你的 linkdin 履历上面有一定工作经验的时候，同时你的 connection 比较多的时候，那么会有 hiring manager 对你的履历感兴趣然后来私信你。</li>
</ul>

<h3 id="投简历的-tips">投简历的 Tips</h3>

<ul>
  <li>符合加拿大标准，直接付费买一个编辑简历的平台服务</li>
  <li>一定要求 cover letter</li>
  <li>所有的工作都投</li>
  <li>找工作期间，一定要把投简历当成全职工作，不要想起来才投一下（这是最最最重要的策略）</li>
  <li>就算求职期间很受挫，也要每天规律 job hunting</li>
  <li>比如每天 10 点开始，在 indeed 上找最新的招聘信息，基本上只投 just posted，因为越是抢在前面投的简历，简历被看到的机会越大</li>
  <li>搜索职位关键字的时候要灵活，虽然是前端开发，不要只搜 front end developer，可以搜：
    <ul>
      <li>front end developer</li>
      <li>web designer</li>
      <li>UX/UI developer</li>
      <li>full stack developer</li>
      <li>WordPress developer</li>
      <li>marketing developer 等</li>
    </ul>
  </li>
</ul>

<h3 id="如果提高自己的求职竞争力">如果提高自己的求职竞争力</h3>

<ol>
  <li>Portfolio: 这是体现技术实力最重要的手段</li>
  <li>Freelancing: 很多找不到全职的同学可以积极的做 freelancing
    <ul>
      <li>一方面 freelancing 是属于实际的项目经验，面试的时候有谈资</li>
      <li>一方面 freelancing 项目可以放到你的 portfolio 里去，让公司看到你其实一直在做 web 开发相关的事情</li>
    </ul>
  </li>
  <li>Github: 提供 github 连接</li>
  <li>Leetcode 刷题：基本上 developer 都会遇到的 tech interview,leetcode 上最简单的题目都能训练到面试所需的技能</li>
  <li>参加多伦多地区的 slack 群，像<a href="https://torontojs.com/">TorontoJS</a>, <a href="https://www.womenwhocode.com/profile/edit#my-networks">womenwhocode</a>, 类似的 job meetup，一般都有人发招聘信息。这种投了简历，一般都会至少让你做个 test</li>
  <li>Youtube 熟悉面试技巧:总结技巧，写成博客</li>
</ol>

<h3 id="关于要积极拿到面试">关于要积极拿到面试</h3>

<ul>
  <li>前期先别用内推，别申 dream companies. 前期主要是为了积累经验，每个 tech test 和 onsite 都要认真做。</li>
  <li>像转专业，其实很多时候只是会在学习中遗漏，因为不知道哪里是重点，这时候面试就是为了查漏补缺。不要害怕被拒，也不用急着拿 offer，你就当薅资本主义养猫，免费一小时培训以及练口语。</li>
  <li>一边面一边针对面试抓紧时间补知识点。等你觉得补得差不多了，就可以开始找人内推了。</li>
  <li>最好能找到之前经历和这份工作相关的点。比如有个博主强调设计经验，后来拿到的 offer 也是骗 UX engineer 方向的。</li>
  <li>能讲通为什么要转码很重要，基本上所有公司都看中 JS 的基本功，不怎么问 library,accessibility 是每个公司都问过的。</li>
</ul>

<h3 id="mockup-的网站">Mockup 的网站</h3>

<ul>
  <li><a href="https://www.pramp.com/#/">Pramp</a></li>
</ul>

<h3 id="以下是来自-norah-的推荐学习资料和学习方法">以下是来自 Norah 的推荐，学习资料和学习方法</h3>

<p>1.<a href="https://blog.poetries.top/browser-working-principle/guide/part1/lesson01.html#%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B">浏览器工作原理与实践</a></p>

<h4 id="面试准备">面试准备</h4>

<ol>
  <li>Portfolio: 尽可能多的展示自己的作品，雇主可以直接看到你的程度</li>
  <li>git: 让雇主看到你的代码上传频率</li>
  <li>简历梳理自己的工作经历，让自己能流畅的表达出自己会些什么</li>
  <li>面试技术要点准备：
    <ul>
      <li>重点知识梳理,ES6 的新内容都要过一遍</li>
      <li>JS 特有的闭包， this, 异步，深拷贝, promise 等，这些都要知道怎么用英语表达，尽可能准备</li>
      <li>算法：刷 100 道 easy 的题目</li>
    </ul>
  </li>
  <li>模拟面试</li>
  <li>知识扩展: 尽可能一个方向学精。就把 react 这个里面的框架学好，在扩展把 Node.js 学一下</li>
  <li>每次面试都是总结进步和学习的机会，多面几次就知道面试的套路流程，也知道自己那些地方不行，查漏补缺。一般小公司希望你能马上上手做事，大公司就希望你素质高学习能力好，可持续发展。</li>
  <li>做项目参考 freeCodeCamp</li>
  <li>一般有两类面试问题：
    <ul>
      <li>Behaviour Question
        <ol>
          <li>20-30 个常见的 behaviour 问题</li>
        </ol>
      </li>
      <li>Technical Question
        <ol>
          <li>technical question 可以准备的部分就是自己的经历和写在简历里的项目经验。</li>
          <li>其他部分，根据职位要求的技能点，去搜索常问的面试问题，过一遍。</li>
        </ol>
      </li>
      <li>程序员面试一般 3-4 轮</li>
      <li>网上做题</li>
      <li>HR 电话了解情况</li>
      <li>技术人员面试</li>
      <li>技术经理面试</li>
      <li>总体来说，这种海投得来的面试还是比较难的，内推会容易一些。</li>
      <li>面试题完的题目写下来。</li>
    </ul>
  </li>
</ol>

<h4 id="norah-学过的内容">Norah 学过的内容:</h4>

<ul>
  <li>html,css,js,《JavaScript DOM 编程艺术》,《Java Script 高级程序设计》</li>
  <li>前端框架 React, Angular, Vue</li>
  <li>工具： git,less,scss, webpack, ajax,json, fetch API, HTTP 状态码，node.js</li>
  <li>算法题：基本数据结构，排序，栈，队列，链表，二叉树，图，深度/广度优先搜索，遍历，最短路径，《啊哈，算法》，Youtube:《Leetcode 题解》， github:CyC2918/CS-Notes</li>
  <li>Data Structures: Array, Linked List, Queue, Stack, Tree, Graph, Hash Table</li>
  <li>优先英文搜索查阅资料，是在看不懂，中文辅助</li>
</ul>

<h4 id="the-process-of-learning">The Process of learning</h4>

<ul>
  <li>Find:
    <ul>
      <li>Look for atomic micro-projects to build. For example, navbar, different navbars, hamburger, header, hero,contact form footer etc.</li>
    </ul>
  </li>
  <li>Learn &amp; Build:
    <ul>
      <li>Don’t think. Start coding. Look up tutorials on how to build a specific things and start coding. Knowing without taking action is not knowing.</li>
    </ul>
  </li>
  <li>Repeat:
    <ul>
      <li>Building something once is not enough. You need repetition. A lot of it. Building multiple nav, footers, heros, contact forms etc.</li>
    </ul>
  </li>
  <li>“It’s not that I’m so smart. It’s just that I stay with problems longer.”</li>
</ul>

<h3 id="apply-to-at-least-10-jobs-every-day-thats-300-in-a-month">Apply to at least 10 jobs every day. That’s 300 in a month.</h3>

<ul>
  <li>Even if you convert at 1%, that’s still 1.5 jobs. Most people don’t apply enough. Be ready to move to a different location.</li>
  <li>Don’t worry about not qualifying. Still apply as long as it’s somewhat similar. You can learn things quickly.</li>
</ul>

<h3 id="serverless-is-the-future">Serverless is the future</h3>

<h3 id="most-important">Most Important</h3>

<ol>
  <li>Focus - You must sacrifice all of your other ‘goals’. If you want to win, you have to focus on one thing. Focus requires sacrifice. You have to go ALL IN.</li>
  <li>Recovery from deviation - You will deviate. You will deviate. You will fall off. It’s not an ‘if’. It’s a “when”. The key to success is doubling your rate of failure. The faster you recover, the better.</li>
  <li>Systems over goals. - Forget thinking about</li>
</ol>

<p>1) Resource: <a href="https://www.zhihu.com/question/50714531/answer/1626216412">加拿大留学生在本地找工作有多难？ 知乎作者：Fei 西</a>
2) Resource: <a href="https://www.1point3acres.com/bbs/thread-552825-1-1.html">找工就业【多伦多】文科转码-自学 7 个月（约 400 小时）拿到前端 offer</a>
3) Resource: <a href="https://www.xiaohongshu.com/discovery/item/60c11f60000000000102ff32?xhsshare=WeixinSession&amp;appuid=60bf083a000000000101f224&amp;apptime=1641171807">Norah: 新移民登录加拿大第一份工作怎么找？简历篇</a>
4) Resource: <a href="https://www.xiaohongshu.com/discovery/item/60c11f60000000000102ff32?xhsshare=WeixinSession&amp;appuid=60bf083a000000000101f224&amp;apptime=1641171807">Norah: 新移民登陆加拿大第一份工作怎么找？面试篇</a>
5) Resource: <a href="https://www.xiaohongshu.com/discovery/item/60df58bc000000002103902f?xhsshare=WeixinSession&amp;appuid=60bf083a000000000101f224&amp;apptime=1641171772">Norah: 加拿大新移民中年宝妈转码前端自学分享（一）</a>
6) Resource: <a href="https://www.xiaohongshu.com/discovery/item/60f4dfc0000000002103dcee?xhsshare=WeixinSession&amp;appuid=60bf083a000000000101f224&amp;apptime=1641171748">Norah: 加拿大新移民中年宝妈转码前端分享(二)</a>
7) Resource: <a href="https://www.xiaohongshu.com/discovery/item/610492dc000000000102d86b?xhsshare=WeixinSession&amp;appuid=60bf083a000000000101f224&amp;apptime=1641171724">Norah: 加拿大新移民中年宝妈转码前端分享（三）</a></p>
]]></content>
      <categories>
        
          <category> Job Hunting </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[制作一份前端Portfolio的重点]]></title>
      <url>/job%20hunting/2021/12/26/make_potfolio/</url>
      <content type="html"><![CDATA[<h3 id="一些关键点">一些关键点</h3>

<ol>
  <li>Always remember the keyboard and contrast accessibility</li>
  <li>Stop trying to rate your own skills.
    <ul>
      <li>You don’t know the skill at all</li>
      <li>You’re still learning the skill</li>
      <li>You feel confident in the skill</li>
    </ul>
  </li>
  <li>You only need to tell them what you’re learning and what you feel confident in.</li>
  <li>Write your CSS written mobile-first, mobile responsive is quite important.</li>
  <li>Show me the code, and the live site.</li>
  <li>Tell me what you’ve actually contributed to.</li>
  <li>Prove you don’t need Bootstrap or jQuery</li>
  <li>Speak towards your dream job.</li>
</ol>

<h3 id="portfolio每个部分的细节内容">Portfolio每个部分的细节内容</h3>
<p>使用的工具是 webflow</p>
<ul>
  <li>自我介绍
    <ul>
      <li>告诉大家你是谁</li>
      <li>你做什么的</li>
      <li>你来此的目的是什么</li>
    </ul>
  </li>
  <li>作品
    <ul>
      <li>动态展示</li>
    </ul>
  </li>
  <li>简历
    <ul>
      <li>work experience</li>
      <li>education</li>
      <li>skills</li>
      <li>online courses</li>
      <li>Tools</li>
      <li>Download Resume</li>
    </ul>
  </li>
  <li>About me</li>
  <li>
    <p>Contact Me</p>
  </li>
  <li>Resource: <a href="https://www.freecodecamp.org/news/i-reviewed-fifty-portfolios-on-reddit-and-this-is-what-i-learned-e5d2b43150bc/">What I learned from reviewing 50 portfolios on Reddit in 3 crazy days.</a></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Resource: [Youtube: Beautiful Front End Developer Portfolio</td>
          <td>Web Developer</td>
          <td>No-Code](https://www.youtube.com/watch?v=quiX4tCj_-8&amp;t=137s)</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

]]></content>
      <categories>
        
          <category> Job Hunting </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Radix Sort]]></title>
      <url>/algorithm/2021/11/01/radix/</url>
      <content type="html"><![CDATA[<h4 id="thinking">Thinking:</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">505</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">931</span><span class="p">]</span>

<span class="kd">const</span> <span class="nx">radixSort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">max</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">arr</span><span class="p">)</span>
  <span class="c1">// define a two-dimensional bucket array</span>
  <span class="kd">let</span> <span class="nx">buckets</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">({</span><span class="na">length</span><span class="p">:</span> <span class="mi">10</span><span class="p">},</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">[])</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">buckets</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">mark</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="c1">// when mark &lt; max. we need to do m*=10,</span>
  <span class="c1">// this is the way to become tens digits, 100s digits or larger</span>
  <span class="c1">// it helps to make sure we traverse all digits</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">mark</span> <span class="o">&lt;</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// get number for each digit(10s digit, 100s digit, 1000s digits)</span>
    <span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">num</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">//取余的的概念不牢固:65%100 余数是65</span>
      <span class="kd">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">((</span><span class="nx">num</span> <span class="o">%</span> <span class="p">(</span><span class="nx">mark</span> <span class="o">*</span> <span class="mi">10</span><span class="p">))</span> <span class="o">/</span> <span class="nx">mark</span><span class="p">)</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Number</span><span class="p">.</span><span class="nx">isInteger</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
      <span class="kd">const</span> <span class="nx">digitValue</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">num</span> <span class="o">%</span> <span class="p">(</span><span class="nx">mark</span> <span class="o">*</span> <span class="mi">10</span><span class="p">))</span> <span class="o">/</span> <span class="nx">mark</span><span class="p">)</span>
      <span class="nx">buckets</span><span class="p">[</span><span class="nx">digitValue</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="nx">buckets</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">bucket</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">while</span> <span class="p">(</span><span class="nx">bucket</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nx">bucket</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">})</span>
    <span class="c1">// 每次最外层while循环后m要乘以10</span>
    <span class="c1">// 也就是要判断下一位，比如当前是个位，下次就要判断十位</span>
    <span class="nx">mark</span> <span class="o">*=</span> <span class="mi">10</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">radixSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">))</span>
</code></pre></div></div>

<p><img src="../../../../../assets/images/radix.png" width="800" alt="Domain Name" /></p>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
          <tag> Sort </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Merge Sort]]></title>
      <url>/algorithm/2021/11/01/merge/</url>
      <content type="html"><![CDATA[<h4 id="thinking">Thinking:</h4>

<ol>
  <li>If the list is of length 0 or 1, then it is already sorted. Otherwise:</li>
  <li>Divide the unsorted list into two sublists of above half he size</li>
  <li>Sort each sublist recursively by re-applying merge sort</li>
  <li>Merge the two sublists back into one sorted list</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// O(n*log(n))</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">23</span><span class="p">]</span>

<span class="kd">const</span> <span class="nx">MergeSort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="nx">arr</span>
  <span class="kd">let</span> <span class="nx">mid</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">left</span> <span class="o">=</span> <span class="nx">MergeSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">mid</span><span class="p">))</span>
  <span class="kd">let</span> <span class="nx">right</span> <span class="o">=</span> <span class="nx">MergeSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">mid</span><span class="p">))</span>
  <span class="k">return</span> <span class="nx">Merge</span><span class="p">(</span><span class="nx">left</span><span class="p">,</span> <span class="nx">right</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Merge</span> <span class="o">=</span> <span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">while</span> <span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">r</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">?</span> <span class="nx">l</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="p">:</span> <span class="nx">r</span><span class="p">.</span><span class="nx">shift</span><span class="p">())</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span> <span class="p">?</span> <span class="nx">r</span> <span class="p">:</span> <span class="nx">l</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MergeSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">))</span>
</code></pre></div></div>

<p><img src="../../../../../assets/images/merge-sort.jpg" width="800" alt="Domain Name" /></p>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
          <tag> Sort </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Insertion Sort]]></title>
      <url>/algorithm/2021/10/20/insertion/</url>
      <content type="html"><![CDATA[<h4 id="thinking">Thinking:</h4>

<ol>
  <li>set a marker for the sorted section after the first element</li>
  <li>repeat the following until unsorted section is empty:
select the first unsorted element
swap other elements to the right to create the correct position and shift the unsorted element</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>

<span class="kd">const</span> <span class="nx">InsertionSort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">unsortedElement</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="c1">//selects the first unsorted element</span>
    <span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="c1">//previous sorted element</span>

    <span class="k">while</span> <span class="p">(</span><span class="nx">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">unsortedElement</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//把前面大的数字挪到后面去</span>
      <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="c1">// this loop shifts all the elements to the right to create the correct position for unsorted element</span>
      <span class="nx">j</span> <span class="o">-</span> <span class="mi">1</span> <span class="c1">// ready to compare with the previous sorted element when go to the next while loop</span>
    <span class="p">}</span>
    <span class="c1">//把后面小的目标数字挪到前面一个位置</span>
    <span class="c1">//注意：while循环里最后 j--，下面一行是 j-- + 1  的结果</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">unsortedElement</span>  <span class="c1">// this inserts the unsorted element to its correct position</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">InsertionSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">))</span>

</code></pre></div></div>

<p><img src="../../../../../assets/images/insertionSort.jpg" width="500" alt="Domain Name" /></p>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
          <tag> Sort </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Heap Sort]]></title>
      <url>/algorithm/2021/10/16/heap/</url>
      <content type="html"><![CDATA[<h4 id="thinking">Thinking:</h4>

<h5 id="buildmaxheaparr">buildMaxHeap(arr)</h5>
<p>1 loop through all non-leaf node =&gt; Math.floor(arr.length/2-1) from last non-leaf node to first non-leaf node
2 compare that node with its 2 children to find out the largest number by heapify method</p>

<h5 id="heapifyarri">heapify(arr,i)</h5>
<p>1 get three dots’ index or values:
current non-leaf node: arr[i],
left child node index: 2i+1
right child node index:2i+2</p>

<p>2 firstly, compare left child node with current non-leaf node
3 then, compare right child node with current non-leaf node
4 if the temp max index has changed, we need to swap the value between those nodes, and also need to call heapify(arr, max) again, to re-sort the remaining nodes, to find out if there is another max node exists</p>

<h5 id="heapsortarr">heapSort(arr)</h5>
<p>the main function of this method is to swap the largest node value to the end of the arr and then excludes the sorted largest values from the array, re-sort the rest unsorted array to find out a new largest node value again
1 call buildMaxHeap(arr,heapSize) to initialize the correct heap in the first time
2 loop through the array from end to start, swap the arr[arr_length-1] with the arr[0], put the largest node value to the end of the array
3 reduce the array length by one to exclude the sorted values
4 since currently the heap is in the correct structure,(from top to bottom, from left to right is sorted from large values to small values), so we only need to call heapify(arr, 0, heapSize) with second parameter ‘0’, this means we only need to sort the topped node to find out the largest value in the array, no need to sort the largest value from the non-leaf node from the bottom of the tree again.
5 that’s it~!</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">20</span><span class="p">]</span>
<span class="kd">const</span> <span class="nx">buildMaxHeap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">heapSize</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">//从非叶子节点开始对每一组堆进行排序，保证 parent node 值最大</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">heapSize</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">heapify</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">heapSize</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// recursion happened here</span>
<span class="kd">const</span> <span class="nx">heapify</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">heapSize</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">leftIndex</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="kd">let</span> <span class="nx">rightIndex</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">2</span>
  <span class="kd">let</span> <span class="nx">tempMaxIndex</span> <span class="o">=</span> <span class="nx">i</span>

  <span class="c1">//...我彻底忘掉了控制原数组长度-&gt; 因为之后我们需要移除最大顶点值，每移除一个最大顶点值就需要数组减去一个元素长度</span>
  <span class="c1">// 三目运算符不能随便用!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!会出bug, 没 debugger 过，不打算细究，就是测试出来不能随便用三目运算符</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">leftIndex</span> <span class="o">&lt;</span> <span class="nx">heapSize</span> <span class="o">&amp;&amp;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">leftIndex</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">tempMaxIndex</span><span class="p">])</span> <span class="nx">tempMaxIndex</span> <span class="o">=</span> <span class="nx">leftIndex</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">rightIndex</span> <span class="o">&lt;</span> <span class="nx">heapSize</span> <span class="o">&amp;&amp;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">rightIndex</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">tempMaxIndex</span><span class="p">])</span> <span class="nx">tempMaxIndex</span> <span class="o">=</span> <span class="nx">rightIndex</span>

  <span class="c1">// 忘了运行swap需要一个条件，就是 tempMaxIndex !== i 的时候才需要swap</span>
  <span class="c1">// 因为如果 最大顶点值就是 当前non-leaf node的话，那没必要swap啊</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">tempMaxIndex</span> <span class="o">!==</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">swap</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">tempMaxIndex</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
    <span class="nx">heapify</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">tempMaxIndex</span><span class="p">,</span> <span class="nx">heapSize</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">swap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">one</span><span class="p">,</span> <span class="nx">two</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// temp &lt;- arr[one] &lt;- arr[two] &lt;- temp</span>
  <span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">one</span><span class="p">]</span>
  <span class="nx">arr</span><span class="p">[</span><span class="nx">one</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">two</span><span class="p">]</span>
  <span class="nx">arr</span><span class="p">[</span><span class="nx">two</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">heapSort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">//因为arr_length需要在本方法内递减才能剔除掉顶点值，所以在这里 跟全局变量arr_length关联上</span>
  <span class="kd">let</span> <span class="nx">heapSize</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span>
  <span class="nx">buildMaxHeap</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">heapSize</span><span class="p">)</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">k</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">k</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">k</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">swap</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">k</span><span class="p">)</span>
    <span class="nx">heapSize</span><span class="o">--</span>
    <span class="nx">heapify</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">heapSize</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">heapSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span>

</code></pre></div></div>

<p><img src="../../../../../assets/images/heapSort.jpg" width="500" alt="Domain Name" />
<img src="../../../../../assets/images/heapSor2.jpg" width="500" alt="Domain Name" /></p>

]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
          <tag> Sort </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Counting Sort]]></title>
      <url>/algorithm/2021/10/12/counting/</url>
      <content type="html"><![CDATA[<h4 id="thinking">Thinking:</h4>

<ul>
  <li>index 是 arr 的 (value - min) !!!!!!!</li>
  <li>index 是 arr 的 (value - min）!!!!!!!</li>
  <li>
    <p>index 是 arr 的 (value - min) !!!!!!</p>
  </li>
  <li>the  last position that 4(the index of count) can occur is going to be the value at 4, the value is 5</li>
  <li>
    <p>the last position that 2(the index of count) can occur is going to be the value at 2, the value is 3</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  我主要不懂 running  sum，把 running sum 当成新输出数组的长度
  running sum = result.length
</code></pre></div>    </div>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="kd">const</span> <span class="nx">countingSort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">max</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">arr</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(...</span><span class="nx">arr</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">countLength</span> <span class="o">=</span> <span class="nx">max</span> <span class="o">-</span> <span class="nx">min</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="kd">let</span> <span class="nx">counting</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">countLength</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

  <span class="c1">//遍历原数组，开始计算每个元素出现的次数， counting the occurrence of each value in the array</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span>
    <span class="nx">counting</span><span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">-</span> <span class="nx">min</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>

  <span class="c1">//running sum</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">v</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">v</span> <span class="o">&lt;</span> <span class="nx">countLength</span><span class="p">;</span> <span class="nx">v</span><span class="o">++</span><span class="p">)</span>
    <span class="nx">counting</span><span class="p">[</span><span class="nx">v</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">counting</span><span class="p">[</span><span class="nx">v</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>

  <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">let</span> <span class="nx">runningSum</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">k</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">k</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">k</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">runningSum</span> <span class="o">=</span> <span class="nx">counting</span><span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">-</span> <span class="nx">min</span><span class="p">]</span>
    <span class="nx">result</span><span class="p">[</span><span class="nx">runningSum</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span>
    <span class="nx">counting</span><span class="p">[</span><span class="nx">arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">-</span> <span class="nx">min</span><span class="p">]</span><span class="o">--</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">countingSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">))</span>

</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
          <tag> Sort </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Quick Sort]]></title>
      <url>/algorithm/2021/10/08/quick/</url>
      <content type="html"><![CDATA[<h4 id="thinking">Thinking:</h4>

<p>when we don’t have special knowledge about certain set of unsorted data
the best we can do is O(n*log(n)), like using quick or merge sort, the fastest sorting algorithms.
In a recursion we are going to be able to split the inputs for merge sort up to log(n) levels of work.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">QuickSort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">startIndex</span><span class="p">,</span> <span class="nx">endIndex</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">startIndex</span> <span class="o">&lt;</span> <span class="nx">endIndex</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">pivotIndex</span> <span class="o">=</span> <span class="nx">Partition</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">startIndex</span><span class="p">,</span> <span class="nx">endIndex</span><span class="p">)</span>
    <span class="nx">QuickSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">startIndex</span><span class="p">,</span> <span class="nx">pivotIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    <span class="nx">QuickSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">pivotIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">endIndex</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Partition</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">startIndex</span><span class="p">,</span> <span class="nx">endIndex</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">pivotValue</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">endIndex</span><span class="p">]</span>
  <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">startIndex</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">startIndex</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">endIndex</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">pivotValue</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">Swap</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="nx">i</span> <span class="p">,</span> <span class="nx">j</span><span class="p">)</span>
      <span class="nx">i</span><span class="o">++</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">Swap</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span> <span class="nx">endIndex</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">i</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Swap</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">index1</span><span class="p">,</span> <span class="nx">index2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span><span class="nx">arr</span><span class="p">[</span><span class="nx">index1</span><span class="p">]</span>
  <span class="nx">arr</span><span class="p">[</span><span class="nx">index1</span><span class="p">]</span> <span class="o">=</span><span class="nx">arr</span><span class="p">[</span><span class="nx">index2</span><span class="p">]</span>
  <span class="nx">arr</span><span class="p">[</span><span class="nx">index2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">QuickSort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">low</span><span class="p">,</span> <span class="nx">high</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">low</span> <span class="o">&lt;</span> <span class="nx">high</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">Partition</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">low</span><span class="p">,</span> <span class="nx">high</span><span class="p">);</span>
    <span class="nx">QuickSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">low</span><span class="p">,</span> <span class="nx">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
    <span class="nx">QuickSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">p</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">high</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<p><img src="../../../../../assets/images/quickSort1.png" width="800" alt="Domain Name" />
<img src="../../../../../assets/images/quickSort3.jpeg" width="800" alt="Domain Name" /></p>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
          <tag> Sort </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Bucket Sort]]></title>
      <url>/algorithm/2021/10/06/bucket/</url>
      <content type="html"><![CDATA[<h4 id="thinking">Thinking:</h4>

<ol>
  <li>Create the initial bucketSort function</li>
  <li>Create variables for i, min, max, and bucket size</li>
  <li>Find min and max value</li>
  <li>Create an amount of buckets</li>
  <li>Push values to correct buckets</li>
  <li>Sort buckets: it works by arranging elements into ‘buckets’ which are then sorted using another sort.</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// bucket sort is most suitable for sorting an array of </span>
<span class="c1">// floating values or input is uniformly distributed over a range</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">32</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">7</span><span class="p">];</span>

<span class="kd">const</span> <span class="nx">selectionSort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">temp</span><span class="p">,</span> <span class="nx">minIndex</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">minIndex</span> <span class="o">=</span> <span class="nx">i</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">minIndex</span><span class="p">])</span> <span class="p">{</span>
        <span class="nx">minIndex</span> <span class="o">=</span> <span class="nx">j</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// until inner loop completed then exchange the value</span>
    <span class="nx">temp</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">minIndex</span><span class="p">]</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">minIndex</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">bucketSort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">bucketsAmount</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">max</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">arr</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">min</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(...</span><span class="nx">arr</span><span class="p">)</span>
  <span class="c1">// initializing each bucket</span>
  <span class="kd">let</span> <span class="nx">eachBucket</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">({</span><span class="na">length</span><span class="p">:</span> <span class="nx">bucketsAmount</span><span class="p">},</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">[])</span>
<span class="c1">// decide the count of each bucket</span>
  <span class="kd">let</span> <span class="nx">eachBucketLength</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">max</span> <span class="o">-</span> <span class="nx">min</span><span class="p">)</span> <span class="o">/</span> <span class="nx">bucketsAmount</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>

  <span class="c1">// push values in a same range to the specific bucket</span>
  <span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">currentValue</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">currentValue</span> <span class="o">-</span> <span class="nx">min</span><span class="p">)</span> <span class="o">/</span> <span class="nx">eachBucketLength</span><span class="p">)</span>
    <span class="nx">eachBucket</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">currentValue</span><span class="p">)</span>
  <span class="p">})</span>

  <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="c1">// A stable sort keeps the same relative order between any items with equal keys</span>
  <span class="nx">eachBucket</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">subArray</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">selectionSort</span><span class="p">(</span><span class="nx">subArray</span><span class="p">)</span>
    <span class="nx">subArray</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="nx">arr</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bucketSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
          <tag> Sort </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Bubble Sort]]></title>
      <url>/algorithm/2021/10/05/bubble/</url>
      <content type="html"><![CDATA[<h4 id="thinking">Thinking:</h4>
<p>Comparing each pair of adjacent items and swapping their value (not the index) if they are in the wrong order, then pass through the list from inside to outside until no swaps are needed</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>

<span class="kd">const</span> <span class="nx">bubbleSort</span> <span class="o">=</span> <span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span> <span class="c1">//swap</span>
        <span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
        <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
        <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">temp</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">arr</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bubbleSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">))</span>
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> Algorithm </category>
        
      </categories>
      <tags>
        
          <tag> Algorithm </tag>
        
          <tag> Sort </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Deploy Project With buildpacks to Heroku and Github]]></title>
      <url>/buildpacks/2021/09/29/buildpacks_deploy_to_heroku/</url>
      <content type="html"><![CDATA[<h3 id="deploy-to-heroku">Deploy to Heroku</h3>

<ol>
  <li>
    <p>Go to the <a href="https://dashboard.heroku.com">Heroku</a> website, if you don’t have a account, register one first.</p>
  </li>
  <li>
    <p>Open Command Line, enter <code class="language-plaintext highlighter-rouge">heroku login</code>, hit any button, when you see <code class="language-plaintext highlighter-rouge">heroku: Press any key to open up the browser to login or q to exit:</code>, it will jump to the webpage where it ask us to <code class="language-plaintext highlighter-rouge">Log in</code> Heroku.</p>
  </li>
  <li>
    <p>You may have to manually enter your username and password for Heroku in your command line if browser in your command line browser window does not open.</p>
  </li>
  <li>Create a Heroku Project Command:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">heroku create spending-log --buildpack mars/create-react-app</code>.</li>
      <li>This <strong><em><a href="https://github.com/mars/create-react-app-buildpack">create-react-app-buildpack</a></em></strong> is also great because it will also use the production build of our react-app for the deployment.</li>
    </ul>
  </li>
  <li>Here is the buildpacks command:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  COMMANDS
 buildpacks:add       add new app buildpack, inserting into list of buildpacks if necessary
 buildpacks:clear     clear all buildpacks set on the app
 buildpacks:info      fetch info about a buildpack
 buildpacks:remove    remove a buildpack set on the app
 buildpacks:search    search for buildpacks
 buildpacks:set
 buildpacks:versions  list versions of a buildpack
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git add .</code></li>
  <li><code class="language-plaintext highlighter-rouge">git commit -m "fix all the problem"</code></li>
  <li><code class="language-plaintext highlighter-rouge">git push heroku master</code></li>
</ol>

<h3 id="deploy-to-github">Deploy to Github</h3>
<ol>
  <li>Run <code class="language-plaintext highlighter-rouge">yarn build</code> to build the project, you will get a build folder, this is for displaying the content in a independent website.</li>
  <li>Check current project the <code class="language-plaintext highlighter-rouge">.gitignore</code>  file, to make sure we exclude the <code class="language-plaintext highlighter-rouge">build</code> folder</li>
  <li>Run <code class="language-plaintext highlighter-rouge">yarn global add serve</code></li>
  <li>Run <code class="language-plaintext highlighter-rouge">serve -s build</code> You will learn more about deployment from this webpage: <a href="https://create-react-app.dev/docs/deployment/">Deployment</a></li>
  <li>Create a new repository in github to store the production of this project.</li>
  <li>Go to <strong><em>build</em></strong> folder</li>
  <li>Run <code class="language-plaintext highlighter-rouge">git init</code></li>
  <li>Run <code class="language-plaintext highlighter-rouge">git add .</code></li>
  <li>Run <code class="language-plaintext highlighter-rouge">git commit -m "deploy spending log project to github"</code></li>
  <li>Run <code class="language-plaintext highlighter-rouge">git remote add origin git@github.com:Yueran-Yu/spending-log-app.git</code></li>
  <li>Run <code class="language-plaintext highlighter-rouge">git push --set-upstream origin master</code></li>
  <li>Go to <code class="language-plaintext highlighter-rouge">package.json</code>, add <code class="language-plaintext highlighter-rouge">"homepage" : "."</code> package.json at the top.</li>
</ol>

<h3 id="the-custom-deploy-script-deploysh">The custom deploy script: <strong>deploy.sh</strong></h3>
<ol>
  <li>create a file <strong><em>deploy.sh</em></strong> under the folder <strong><em>scripts</em></strong></li>
  <li>Add the <a href="https://linuxize.com/post/bash-shebang/">bash shebang</a> <strong><em>#!/usr/bin/env bash</em></strong></li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/env bash
yarn build &amp;&amp;
cd build &amp;&amp;
git init &amp;&amp;
git add . &amp;&amp;
git commit -m 'deploy' &amp;&amp;
git remote add origin git@github.com/ &amp;&amp;
git push -u origin master -f &amp;&amp;
cd -
</code></pre></div></div>
<ol>
  <li>These are the executable script example in the <code class="language-plaintext highlighter-rouge">deploy.sh</code> file.</li>
  <li>Final step: add <code class="language-plaintext highlighter-rouge">"deploy: "sh scripts/deploy.sh</code> to the <code class="language-plaintext highlighter-rouge">package.json</code>  file.</li>
  <li>Run <code class="language-plaintext highlighter-rouge">yarn deploy</code>, it will automatically deploy the script as you provided.</li>
</ol>

]]></content>
      <categories>
        
          <category> Buildpacks </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[The Difference Between a Framework and Library]]></title>
      <url>/react/2021/07/19/framework_and_library/</url>
      <content type="html"><![CDATA[<h3 id="what-the-difference-between-framework-and-library">What the difference between framework and library?</h3>

<ul>
  <li>
    <p>Both libraries and frameworks are reusable code written by someone else. Their purpose is to help you solve common
problems in easier ways.</p>
  </li>
  <li>
    <h4 id="the-technical-difference">The Technical Difference</h4>
  </li>
</ul>

<p>The technical difference between a framework and library lies in a term called inversion of control. When you use a
library, you are in charge of the application flow. You choose when and where to call the library. When you use a
framework, the framework is in charge of the flow. It provides you with a few places to plug in your code, but it calls
the code you plugged in as needed.</p>

<p><img src="../../../../../assets/images/frameworkvslibraries.png" width="800" alt="frameworks vs libraries" /></p>

<ul>
  <li>You tell libraries what to do, frameworks tell you what to do.</li>
</ul>

<h4 id="one-definition-i-know-is">One definition I know is:</h4>

<ul>
  <li>a framework is a software where you plug your code into</li>
  <li>a library is a software that you plug into your code</li>
</ul>

<h3 id="why-is-react-a-library-and-not-a-framework">Why is React a library and not a framework?</h3>

<ul>
  <li>React itself does not include many of the React-specific libraries you’re going to need for most projects. Angular and
Vue, by comparison, include many more tools all bundled within the core package itself.</li>
  <li>Many developers consider this discussion of what is and isn’t a library to be trivial. But it has real consequences
for our development process. In other words, because React is a library and not a framework, becoming a skilled React
developer entails having a good knowledge of third-party React libraries.
    <ul>
      <li>The Third-Party React libraries example:</li>
      <li>Redux, Redux Form, React Router, Styled Component</li>
    </ul>
  </li>
</ul>

<h3 id="since-react-is-a-library-you-must-choose-the-tools-on-your-own">Since React is a library, you must choose the tools on your own</h3>

<ul>
  <li>That means, in order to build complete React applications, you will need to choose these packages and tools on your
own.</li>
  <li>For a form library, I have to decide whether I want to use the package React Hook Form or Formik. These are both
React-specific form libraries to add important features to our forms like validation.</li>
  <li>For testing my React application, I might use either React Testing Library, Jest, or some combination of the two.</li>
  <li>For making network requests, I might need to choose between the Fetch API and Axios. I might also need to decide if I
want to add an additional library to make managing my server state easier, such as React Query or SWR.</li>
</ul>

<p><a href="https://digitalya.co/blog/is-react-a-framework-or-library/">3 Reference: Is React a framework or library? - Everything you need to know </a></p>

<ul>
  <li>When choosing the right libraries and frameworks to build your mobile app or we app, it</li>
  <li>s important that a framework is popular so that it has a well-established dev community around it. If you were to
search on google or StackOverflow a question regarding some specific functionality or bug inside the framework, you’d
most likely want to see other people who might have encountered the issue and found a solution.</li>
</ul>

<h3 id="resource-reference">Resource Reference:</h3>
<p><a href="https://sofienebk.medium.com/what-is-the-difference-between-a-framework-and-library-2b712a1a1c41">1 What is the Difference Between a Framework and Library?</a></p>

<p><a href="https://betterprogramming.pub/libraries-vs-frameworks-whats-the-difference-5f28c53dcffe">2 Libraries vs. Frameworks — What’s the Difference?</a></p>

<p><a href="https://www.freecodecamp.org/news/is-react-a-library-or-a-framework/">3 Is React a Library or a Framework? Here’s Why it Matters</a></p>
]]></content>
      <categories>
        
          <category> React </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Hash Router VS. Browser Router]]></title>
      <url>/react%20router/2021/06/27/hash_router_browser_router/</url>
      <content type="html"><![CDATA[<h3 id="hashrouter">HashRouter</h3>
<ul>
  <li>
    <p>It uses URL hash, it puts no limitations on supported browsers or web server. Server-side routing is independent from client-side routing.</p>
  </li>
  <li>
    <p>Backward-compatible single-page application can use it as example.com/#/react/route. The setup cannot be backed up by server-side rendering because it’s / path that is served on server side, #/react/route URL hash cannot be read from server side. On client side, window.location.hash is parsed by React router. React router renders a component that it was configured to render for /react/route, similarly to BrowserRouter.</p>
  </li>
  <li>
    <p>Most importantly, HashRouter use cases aren’t limited to SPA. A website may have legacy or search engine-friendly server-side routing, while React application may be a widget that maintains its state in URL like example.com/server/side/route#/react/route. Some page that contains React application is served on server side for /server/side/route, then on client side React router renders a component that it was configured to render for /react/route, similarly to previous scenario.</p>
  </li>
  <li>
    <p>HashRouter basically it uses the hash in the URL to render the component.</p>
  </li>
</ul>

<h3 id="browserrouter">BrowserRouter</h3>
<ul>
  <li>
    <p>BrowserRouter, it uses HTML5 history API to render the component.It uses history API, i.e. it’s unavailable for legacy browsers (IE 9 and lower and contemporaries). Client-side React application is able to maintain clean routes like example.com/react/route but needs to be backed by web server. Usually this means that web server should be configured for single-page application, i.e. same index.html is served for /react/route path or any other route on server side. On client side, window.location.pathname is parsed by React router. React router renders a component that it was configured to render for /react/route.</p>
  </li>
  <li>
    <p>Additionally, the setup may involve server-side rendering, index.html may contain rendered components or data that are specific to current route.</p>
  </li>
</ul>

<p><a href="https://stackoverflow.com/questions/51974369/what-is-the-difference-between-hashrouter-and-browserrouter-in-react">Resource: What the difference between hash router and browser router</a></p>
]]></content>
      <categories>
        
          <category> React Router </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Controlled Component VS. Uncontrolled Component]]></title>
      <url>/react/2021/06/13/control_uncontrol_component/</url>
      <content type="html"><![CDATA[<ul>
  <li>Reference Article:
    <ul>
      <li><a href="https://stackoverflow.com/questions/42522515/what-are-react-controlled-components-and-uncontrolled-components">1. Controlled Component</a></li>
      <li><a href="https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/#conclusion">2. Controlled and uncontrolled form inputs in React don’t have to be complicated</a></li>
    </ul>
  </li>
  <li>A <em>Controlled Component</em> is one that takes its current value through <strong>props</strong> and notifies changes through callback like <strong><em>onChange</em></strong> A parent component “controls” it by handling the callback and managing its own state and passing the new values as props to the controlled component. You could also call this a “dumb component”.
&amp;</li>
  <li>A <em>Uncontrolled Component</em> is one that stores its own state internally, and you query the DOM using a <strong>ref</strong> to find its current value when you need it. This is a bit more like traditional HTML.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1">// Controlled:</span>
   <span class="o">&lt;</span><span class="nx">Input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">'</span><span class="s1">text</span><span class="dl">'</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">value</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">handleChange</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span>
   <span class="c1">//Uncontrolled:</span>
  <span class="o">&lt;</span><span class="nx">Input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">defaultValue</span><span class="o">=</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">inputRef</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>   <span class="c1">// Use `inputRef.current.value` to read the current value of &lt;input&gt;</span>
</code></pre></div></div>

]]></content>
      <categories>
        
          <category> React </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[How to Write Extensible Code]]></title>
      <url>/coding%20rules/2021/03/16/extensible_code/</url>
      <content type="html"><![CDATA[<h4 id="are-you-starting-to-feel-like-were-doing-a-lot-of-things-over-and-over-the-same-way-were-creating-reducers-and-actions-and-selectors-and-connecting-components-and-rendering-components-and-if-things-seem-repetitive-to-you-thats-actually-a-good-thing-because-what-were-doing-is-were-making-things-very-simple">Are you starting to feel like we’re doing a lot of things over and over the same way we’re creating reducers and actions and selectors and connecting components and rendering components and if things seem repetitive to you, that’s actually a good thing because what we’re doing is we’re making things very simple.</h4>

<blockquote>

</blockquote>

<h4 id="now-were-creating-a-lot-of-files-in-our-project-but-these-files-are-all-usually-under-one-hundred-lines-of-code-each-file-is-very-very-simple-isnt-it-we-havent-run-any-crazy-long-thousand-line-algorithms-everything-is-nice-small-and-simple-and-if-you-notice-each-one-makes-each-component-very-very-small-and-also-very-extensible-that-is-he-reuses-components-and-features-across-the-application-so-that-hes-not-constantly-doing-the-same-thing-over-and-over">Now we’re creating a lot of files in our project but these files are all usually under one hundred lines of code. Each file is very very simple isn’t it. We haven’t run any crazy long thousand line algorithms. Everything is nice small and simple. And if you notice, each one makes each component very very small and also very extensible. That is he reuses components and features across the application so that he’s not constantly doing the same thing over and over.</h4>

<blockquote>

</blockquote>

<h4 id="its-ok-if-were-copying-code-that-is-well-similar-in-lets-say-a-selector-or-using-map-state-to-props-over-and-over-the-idea-is-that-hes-structured-the-project-in-such-a-way-that-your-eye-could-come-to-the-project-and-really-easily-add-features-really-easily-add-a-custom-button-or-a-cart-item-and-this-is-a-sign-of-a-really-good-developer-because-when-hes-coding-he-is-coding-for-the-future-as-well">It’s ok if we’re copying code that is well similar in let’s say a selector or using map state to props over and over. The idea is that he’s structured the project in such a way that your eye could come to the project and really easily add features, really easily add a custom button or a cart item. And this is a sign of a really good developer. Because when he’s coding, he is coding for the future as well.</h4>

<blockquote>

</blockquote>

<h4 id="he-knows-that-by-thinking-a-little-bit-about-how-to-make-the-code-more-extensible-in-the-future-he-will-benefit-as-he-takes-on-more-and-more-features-because-he-can-use-the-same-functionality-in-one-part-of-the-app-and-in-another-part-of-the-app">He knows that by thinking a little bit about how to make the code more extensible. In the future he will benefit as he takes on more and more features because he can use the same functionality in one part of the app and in another part of the app.</h4>

<blockquote>

</blockquote>

<h4 id="react-and-redux-really-allows-us-to-create-extensible-code-and-the-other-word-that-you-might-be-thinking-of-is-also-predictable-code">React and Redux really allows us to create extensible code and the other word that you might be thinking of is also predictable code.</h4>
]]></content>
      <categories>
        
          <category> Coding Rules </category>
        
      </categories>
      <tags>
        
          <tag> learning </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Redux]]></title>
      <url>/redux/2021/02/27/redux/</url>
      <content type="html"><![CDATA[<p><a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts">Redux Tutorial Reference</a></p>

<ul>
  <li>Good for managing large state</li>
  <li>Useful for sharing data between components</li>
  <li>Predictable state management using the 3 principles
    <ul>
      <li>Single source of truth</li>
      <li>State is read only</li>
      <li>Changes using pure functions</li>
    </ul>
  </li>
</ul>

<p><img src="../../../../../assets/images/Redux_Flow.png" width="800" alt="Redux  Flow" /></p>

<h3 id="redux-terms-and-concepts">Redux Terms and Concepts</h3>
<h3 id="1-react-redux">1. React-Redux</h3>
<ul>
  <li>Redux can integrate with any UI framework, and is most frequently used with React. <strong><em>React-Redux</em></strong> is our official package that lets your React components interact with with a Redux store by reading pieces of state and dispatching actions to update the store.</li>
</ul>

<h3 id="2-immutability">2. Immutability</h3>
<ul>
  <li>“Mutable” means “changeable”. If something is “immutable”, it can never be changed.</li>
</ul>

<h3 id="3-update-values-immutably">3. Update values immutably</h3>
<ul>
  <li>In order to update values immutably, your code must make copies of existing objects/arrays, and then modify the copies.</li>
  <li>We can do this by hand using JavaScript’s array / object spread operators, as well as array methods that return new copies of the array instead of mutating the original array:</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">// To safely update obj.a.c, we have to copy each piece</span>
    <span class="na">a</span><span class="p">:</span> <span class="p">{</span><span class="na">c</span><span class="p">:</span><span class="mi">3</span><span class="p">},</span> <span class="na">b</span><span class="p">:</span><span class="mi">2</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1">//copy obj  /overwrite a / copy obj.a / overwrite c</span>
    <span class="p">...</span><span class="nx">obj</span><span class="p">,</span>     <span class="na">a</span><span class="p">:{</span>          <span class="p">...</span><span class="nx">obj</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span>         <span class="na">c</span><span class="p">:</span><span class="mi">42</span><span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Redux expects that all state updates are done immutably.</li>
</ul>

<h3 id="4-actions">4. Actions</h3>
<ul>
  <li>An action is a plain Javascript object that has a <strong>type</strong> field. You can think of an action as an event that describes something that happened in the application.</li>
  <li>The <strong>type</strong> field should be a string that gives this action a descriptive name, like “todos/todoAdded”. We usually write that types sting like “domain/eventName”, where the first part is the feature or category that this action belongs to, and the second part is the specific thing that happened.</li>
  <li>An action object can have other fields with additional information about <strong>what happened</strong>. By convention, we put that information in a field called payload.</li>
  <li>A typical action object might look like this:
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">addTodoAction</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">todos/todoAdded</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">payload</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Buy milk</span><span class="dl">'</span>
    <span class="p">}</span>
</code></pre></div>    </div>
    <h3 id="5-action-creator">5. Action Creator</h3>
  </li>
  <li>An <strong>action creator</strong> is a function that creates and returns an action object. We typically use these so we don’t have to write the action object by hand every time.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">addTodo</span> <span class="o">=</span> <span class="nx">text</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">todos/todoAdded</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">payload</span><span class="p">:</span> <span class="nx">text</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="6-reducers">6. Reducers</h3>
<ul>
  <li>A reducer is a function that receives the current <strong>state</strong> and an <strong>action</strong> object, decides how to update the state if necessary, and returns the new state: <strong>(state, action) =&gt; newState</strong> You can think of a reducer as an event listener which handles events based on the received action (event) type.</li>
  <li>Reducers must always follow some specific rules:
    <ul>
      <li>They should only calculate the new state value based on the <strong>state</strong> and <strong>action</strong> arguments.</li>
      <li>They are not allowed to modify the existing <strong>state</strong>. Instead, they must make immutable updates, by coping the existing <strong>state</strong> and making changes to the copied values.</li>
      <li>They must not do any asynchronous logic, calculate random values, or cause other “side effects”</li>
    </ul>
  </li>
  <li>The logic inside reducer functions typically follows the same series of steps:
    <ul>
      <li>Check to see if the reducer cares about this action
        <ul>
          <li>If so, make a copy of the state, update the copy with new values, and return it.</li>
        </ul>
      </li>
      <li>Otherwise, return of a reducer, showing the steps that each reducer should follow:</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
  <span class="kd">function</span> <span class="nx">counterReducer</span><span class="p">(</span><span class="nx">state</span><span class="o">=</span><span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">){</span>
    <span class="c1">// check to see if the reducer cares about this action</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">counter/increment</span><span class="dl">'</span><span class="p">){</span>
      <span class="c1">// if so, make a copy of 'state'</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
        <span class="c1">// and update the copy with the new value</span>
        <span class="na">value</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">value</span> <span class="o">+</span><span class="mi">1</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// otherwise return the existing state unchanged</span>
    <span class="k">return</span> <span class="nx">state</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>A redux reducer function is exactly the same idea as this “reduce callback” function!</li>
  <li>We can say that Redux reducers reduce a set of actions (over time) into a single state.</li>
</ul>

<h3 id="7-store">7. Store</h3>
<ul>
  <li>The current Redux application <strong><em>state</em></strong> lives in an object called the <em>store</em></li>
  <li>The store is created by passing in a reducer, and has a method called <strong>getState</strong> that returns the current state value:
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">import</span> <span class="p">{</span><span class="nx">configureStore</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@reduxjs/toolkit</span><span class="dl">'</span>
 <span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">configureStore</span><span class="p">({</span><span class="na">reducer</span><span class="p">:</span> <span class="nx">counterReducer</span> <span class="p">})</span>
 <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">())</span>
 <span class="c1">// {value: 0}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="8-dispatch">8. Dispatch</h3>
<ul>
  <li>The Redux store has a method called <strong>dispatch</strong>. The only way to update the state is to call <strong>store.dispatch()</strong> and pass in an action object. The store will run its reducer function and save the new state value inside, and we can call <strong>getState()</strong> to retrieve the updated value:
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span><span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">counter/increment</span><span class="dl">'</span><span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">())</span>
<span class="c1">// {value:1}</span>
</code></pre></div>    </div>
  </li>
  <li>You can think of dispatching actions as “triggering an event” in the application. Something happened, and we want the store to know about it. Reducers act like event listeners, and when they hear an action they are interested in, they update the state in response.</li>
  <li>We typically call action creators to dispatch the right action:
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="kd">const</span> <span class="nx">increment</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="k">return</span> <span class="p">{</span>
       <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">counter/increment</span><span class="dl">'</span>
     <span class="p">}</span>
   <span class="p">}</span>

   <span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">())</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">store</span><span class="p">.</span><span class="nx">getState</span><span class="p">())</span>
   <span class="c1">// {value: 2}</span>
</code></pre></div>    </div>

    <h3 id="summary">Summary</h3>
    <ul>
      <li>
        <h4 id="redux-is-a-library-for-managing-global-application-state">Redux is a library for managing global application state</h4>
        <ul>
          <li>Redux is typically used with the React-Redux library for integrating Redux and React together</li>
          <li>Redux Toolkit is the recommended way to write Redux logic</li>
        </ul>
      </li>
      <li>
        <h4 id="redux-uses-a-one-way-data-flow-app-structure">Redux uses a “one-way data flow” app structure</h4>
        <ul>
          <li>State describes the condition of the app at a point in time, and UI render based on that state</li>
          <li>When something happens in the app”
            <ul>
              <li>The UI dispatches an action</li>
              <li>The store runs the reducers and the state is updated based on what occurred</li>
              <li>The store notifies the UI that the state has changed</li>
            </ul>
          </li>
          <li>The UI re-renders based on the new state</li>
        </ul>
      </li>
      <li>Redux uses serval types of code
        <ul>
          <li>Actions are plain objects with a <strong>type</strong> field, and describe “what happened” in the app</li>
          <li>Reducers are functions that calculate a new state value based on previous state + an action</li>
          <li>A redux store runs the root reducer whenever an action is dispatched</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
]]></content>
      <categories>
        
          <category> Redux </category>
        
      </categories>
      <tags>
        
          <tag> react </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Query Reference and Query Snapshot]]></title>
      <url>/firebase/2021/02/19/query_ref_query_snapshot/</url>
      <content type="html"><![CDATA[<h3 id="brief-note">Brief Note</h3>
<ul>
  <li>A query is a request we make to firestore to give us something from the database.</li>
  <li>Firestore returns us two types of objects: references and snapshots. Of these objects, they can be either Document or Collection versions.</li>
  <li>Firestore will <strong>always</strong> return us these objects, even if nothing exists at from that query.</li>
</ul>

<h3 id="queryreference">QueryReference</h3>
<ul>
  <li>A queryReference object is an object that represents the “current” place in the database that we are querying.</li>
  <li><em>We get them by calling either:</em>
    <ul>
      <li>firestore.doc(‘/users/:userId’);</li>
      <li>firestore.collections(‘/users’);</li>
    </ul>
  </li>
  <li>The queryReference object does not have the actual data of the collection or document. It instead has properties that tell us details about it, or the method to get the Snapshot object which gives us the data we are looking for.</li>
</ul>

<h3 id="documentreference-vs-collectionreference">DocumentReference vs CollectionReference</h3>
<ul>
  <li>CollectionReference - QuerySnapshot: collectionRef.get()</li>
  <li>DocumentReference - DocumentSnapshot: documentRef.get()</li>
  <li>We use documentRef objects to perform our CRUD methods (create, retrieve, update, delete). The documentRef methods are <strong>.set()</strong>,
<strong>.get()</strong>, <strong>update()</strong>, and <strong>.delete()</strong> respectively.</li>
  <li>We also can add documents to collections using the collectionRef object using the <strong>.add()</strong> method. //collectionRef.add({//value:prop})</li>
  <li>We get the snapshotObject from the referenceObject using the <strong>.get()</strong> method. ie. documentRef.get() or collectionRef.get()
    <ul>
      <li>documentRef returns a <strong>documentSnapshot</strong> object.</li>
      <li>collectionRef returns a <strong>querySnapshot</strong> object.</li>
    </ul>
  </li>
</ul>

<h4 id="documentsnapshot">DocumentSnapshot</h4>
<ul>
  <li>We get a documentSnapshot object from our documentReference object.</li>
  <li>The documentSnapshot object allows us to check if a document exists at this query using the <strong>.exists</strong> property which returns a boolean.</li>
  <li>We can also get the actual properties on the object by calling the <strong>.data</strong> method, which returns us a JSON object of the document.</li>
</ul>
]]></content>
      <categories>
        
          <category> Firebase </category>
        
      </categories>
      <tags>
        
          <tag> database </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[How to Pull Code from Other's Repository and Change 'Origin'?]]></title>
      <url>/react/2021/02/02/pull_code_from_others_repo/</url>
      <content type="html"><![CDATA[<blockquote>
  <p><strong><em>1). Repository tutor_react</em></strong></p>

  <p><strong><em>2). Repository student_react</em></strong></p>
</blockquote>

<blockquote>
  <blockquote>
    <p><strong>Target: Pull down the code from Repository</strong> <code class="language-plaintext highlighter-rouge">tutor_react</code> <strong>and put the code into our local folder</strong> <code class="language-plaintext highlighter-rouge">student_react</code></p>
    <ul>
      <li>1) <code class="language-plaintext highlighter-rouge">git clone git@github.com:ZhangSan/tutor_react.git student_react</code></li>
      <li>2) git will clone this project into this local folder <code class="language-plaintext highlighter-rouge">student_react</code></li>
      <li>3) <code class="language-plaintext highlighter-rouge">cd student_clone</code> this is going to this local folder</li>
      <li>4) If we type the <code class="language-plaintext highlighter-rouge">git remote</code>  in the terminal, you will see a <code class="language-plaintext highlighter-rouge">origin</code> here, but this <code class="language-plaintext highlighter-rouge">origin</code> is the name of <code class="language-plaintext highlighter-rouge">tutor_react</code> repo. You can’t push any code to the tutor’s repo since you don’t have the authorization to write in other’s repository. So, at this time, you need to remove the <code class="language-plaintext highlighter-rouge">origin</code> which is now point to <code class="language-plaintext highlighter-rouge">tutor_react</code> repository.</li>
      <li>5) <code class="language-plaintext highlighter-rouge">git remote remove origin</code> this command will remove the name <code class="language-plaintext highlighter-rouge">origin</code> that point to the <code class="language-plaintext highlighter-rouge">tutor_react</code> repository.</li>
      <li>6) Now you need to let the name <code class="language-plaintext highlighter-rouge">origin</code> points to your own repository.</li>
      <li>7) <code class="language-plaintext highlighter-rouge">git remote add origin git@github.com:Yueran-Yu/student_react.git</code> Now the <code class="language-plaintext highlighter-rouge">origin</code> will point to your <code class="language-plaintext highlighter-rouge">student_react</code> repository in github.</li>
      <li>8) Important!!! After you pull down the code from others, you should run <code class="language-plaintext highlighter-rouge">yarn install</code> so that will download all of the packages related to your project.</li>
    </ul>
  </blockquote>
</blockquote>
]]></content>
      <categories>
        
          <category> React </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[React Basics]]></title>
      <url>/react/2021/01/23/react_basics/</url>
      <content type="html"><![CDATA[<h3 id="packagejson">package.json</h3>

<p><code class="language-plaintext highlighter-rouge">"react-scripts":"3.0.0"</code> =&gt;  It allows use to have no worry about webpack and babble.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">react-scripts start</span><span class="dl">"</span><span class="p">,</span>
    <span class="c1">// starts the react project by running "yarn start"</span>
    <span class="dl">"</span><span class="s2">build</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">react-scripts build</span><span class="dl">"</span><span class="p">,</span>
    <span class="c1">// it used to turn all of the react code in the &lt;source&gt; folder into that version the browser to understand and put it inside of this &lt;public&gt; folder,</span>
    <span class="c1">// after running "npm run build" generated a &lt;build&gt; folder, this is the place ready to be deployed and be displayed to the outside users.</span>
    <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">react-scripts test</span><span class="dl">"</span><span class="p">,</span>
    <span class="c1">// run the test code we will going to write</span>
    <span class="dl">"</span><span class="s2">eject</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">react-scripts eject</span><span class="dl">"</span>
    <span class="c1">// take out all of the configuration files that it's hidden from us from Babble and webpack in case wwe will manage it ourselves.</span>
    <span class="p">}</span>
</code></pre></div></div>

<h3 id="source-folder">‘source’ folder</h3>
<ul>
  <li>All applications live, our workspace</li>
</ul>

<h3 id="public-folder">‘public’ folder</h3>
<ul>
  <li>The browser needs an older version of javascript and html to understand</li>
</ul>

<h3 id="class-vs-classname">‘class’ vs. ‘className’</h3>
<ul>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// class</span>
   <span class="kd">class</span> <span class="nx">App</span> <span class="kd">extends</span> <span class="nx">Component</span> <span class="p">{</span>
      <span class="kd">constructor</span><span class="p">(){</span>
         <span class="k">super</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">string</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Hello Today I start to learn something from yihua's teaching</span><span class="dl">"</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">render</span><span class="p">(){</span>
      <span class="k">return</span><span class="p">(</span>
        <span class="c1">// className</span>
        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">App</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">header</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">App-header</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="sr">/header</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">)
</span>    <span class="p">}</span>
    <span class="c1">//the 'className' in the render is used to differentiate the class at the beginning</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="render-method">‘render()’ method</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">render()</code> is one of the built-in methods of <code class="language-plaintext highlighter-rouge">React.Component</code>, the <code class="language-plaintext highlighter-rouge">super()</code> inside the React.Component’s <code class="language-plaintext highlighter-rouge">constructor()</code> helps us call <code class="language-plaintext highlighter-rouge">render()</code></li>
</ul>

<h3 id="two-ways-to-create-components">Two Ways to create components</h3>
<ul>
  <li>Class Component</li>
  <li>Functional Component</li>
</ul>

<h3 id="props-in-the-functional-component">‘props’ in the functional component</h3>
<ul>
  <li>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
      <span class="k">export</span> <span class="kd">const</span> <span class="nx">CardList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
        <span class="k">return</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">hello</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">)
</span>      <span class="p">}</span>

      <span class="c1">// App.js</span>
      <span class="c1">// ...</span>
      <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">App</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">CardList</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Grace-Yueran</span><span class="dl">"</span><span class="o">/&gt;</span>
            <span class="p">{</span>
              <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">monsters</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;&lt;</span><span class="nx">h1</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="err">)
</span>            <span class="p">}</span>
          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>      <span class="p">)</span>
    <span class="p">}</span>
</code></pre></div>    </div>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">props</code> is going to be an object of any properties that you write onto this component where it gets used.</li>
    </ul>
  </li>
</ul>

<h3 id="children-property">‘children’ Property</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// card-list.component.jsx</span>
    <span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
        <span class="k">export</span> <span class="kd">const</span> <span class="nx">CardList</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
          <span class="k">return</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span> <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">)
</span>    
    <span class="c1">// App.js</span>
      <span class="nx">render</span><span class="p">(){</span>
          <span class="k">return</span> <span class="p">(</span>
          <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">App</span><span class="dl">"</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">CardList</span> <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">Grace-Yueran</span><span class="dl">"</span><span class="o">&gt;</span>
    
          <span class="c1">// children property</span>
            <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Grace</span> <span class="nx">Yueran</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/CardList</span><span class="err">&gt;
</span>            <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">monsters</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span><span class="se">)</span><span class="sr"> </span><span class="err">}
</span>          <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">)</span>
      <span class="p">}</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Children</code> are actually what you pass in between the brackets of our component that gets called.</li>
</ul>

<h3 id="the-benefits-of-when-do-we-break-things-down-into-components">The Benefits of When do we break things down into components?</h3>
<ul>
  <li>To be a great React developer you need to be good at these very well:
    <ol>
      <li>Decide on Components</li>
      <li>Decide the State and where it lives</li>
      <li>What changes when state changes</li>
    </ol>
  </li>
  <li>By breaking things down we’re making things more flexible because each component does one thing and one thing really well.</li>
  <li>It can be used in other places, the bigger a file gets the more JSX we have, the more logic we have, the harder it gets to be used in another place.</li>
  <li>The KEY here is that the reason we break things down into smaller components is that we combine each component with its concern and that concern is that this component is only concerned about card list. This component is only concerned about cards.</li>
</ul>

<h3 id="the-second-argument-of-setstate">The second argument of ‘setState()’</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// App.js</span>
    <span class="c1">// if we wanted to see or do something with our state right after we set it</span>
    <span class="c1">// then we have to do it inside of this second argument function that will get called right after the set state.</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">App</span><span class="dl">"</span><span class="o">&gt;</span>
              <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">'</span><span class="s1">search</span><span class="dl">'</span> <span class="nx">placeholder</span><span class="o">=</span><span class="dl">'</span><span class="s1">Search Monster</span><span class="dl">'</span>
                    <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="na">searchField</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">},</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
                      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span>
                    <span class="p">})}</span><span class="sr">/</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="nx">CardList</span> <span class="nx">monsters</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">monsters</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">)</span>
      <span class="p">}</span>
</code></pre></div></div>
<ul>
  <li><strong>The second parameter</strong> to <strong><em>setState()</em></strong> is an optional callback function that will be executed once <strong><em>setState</em></strong> is completed and the component is re-rendered. <strong><em>componentDitUpdate</em></strong> should be used instead to apply such logic in most cases.</li>
</ul>

<h3 id="destructuring">Destructuring</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">monsters</span><span class="p">:</span> <span class="p">[],</span>
        <span class="na">searchField</span><span class="p">:</span> <span class="dl">''</span>
      <span class="p">}</span>
    <span class="p">}</span>

  <span class="c1">// the state object is what we want to pull the properties of</span>
  <span class="kd">const</span> <span class="p">{</span><span class="nx">monsters</span><span class="p">,</span> <span class="nx">searchField</span><span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
  <span class="c1">// equals</span>
  <span class="kd">const</span> <span class="nx">monsters</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">monsters</span>
  <span class="kd">const</span> <span class="nx">searchField</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">searchField</span>
</code></pre></div></div>

<h3 id="when-use-class-component-and-when-use-functional-component">When use class component and when use functional component?</h3>
<ul>
  <li><strong><em>functional components</em></strong>, unlike <strong><em>class components</em></strong>, they don’t have the access to <strong><em>state</em></strong>, because they don’t have the access to constructor, which is a class method on our <strong><em>Component</em></strong> that we import from our React, that we extend our class from.</li>
  <li>They also don’t have access to lifecycle methods, because we don’t always need lifecycle methods or internal state.</li>
  <li>Sometimes we only want to render some HTML, that’s what functional component really is.</li>
  <li>A functional component is just a component that gets some props and returns some HTML.</li>
  <li>If you don’t need internal state nor lifecycle methods, then just use functional components. It’s easier to read and easier to test.</li>
</ul>

<h3 id="the-test-of-the-scope-of-arrow-function">The test of the scope of arrow function</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1">// ======= define the function in the window scope</span>
     <span class="kd">const</span> <span class="nx">myFunc</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
     <span class="c1">// call myFunc()</span>
     <span class="nx">myFunc</span><span class="p">()</span>
     <span class="c1">// result: Window {window: Window, self: Window, document: document, name: "", location: Location, …}</span>


    <span class="c1">// ======= define a function in a class scope</span>
    <span class="kd">class</span> <span class="nx">FatherClass</span><span class="p">{</span>
        <span class="nx">myFunc2</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FatherClass</span><span class="p">()</span>
      <span class="nx">obj</span><span class="p">.</span><span class="nx">myFunc2</span><span class="p">()</span>
      <span class="c1">// result: FatherClass {myFunc2: ƒ}</span>
</code></pre></div></div>

<h3 id="always-use-the-latest-version-of-react-and-reactdom">Always use the Latest Version of React and ReactDOM</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">{</span>
    <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">monsters-rolodex</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">0.1.0</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">private</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">homepage</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://www.graceyutech.com/monsters-rolodex/</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">dependencies</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">@testing-library/jest-dom</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^5.11.4</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">@testing-library/react</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^11.1.0</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">@testing-library/user-event</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^12.1.10</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">gh-pages</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^3.1.0</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^17.0.1</span><span class="dl">"</span><span class="p">,</span>
      <span class="cm">/* '^' symbol means whatever the package manager you are using
      wheather it is a yarn or NPM, whenever it sees npm upgrade or yarn upgrade,
      to update to the latest stable non-breaking version.
      In other words, it should be at least using the '17.0.1' version or greater of react-dom and react.
      */</span>
      <span class="dl">"</span><span class="s2">react-dom</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^17.0.1</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">react-scripts</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">4.0.3</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">web-vitals</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^1.0.1</span><span class="dl">"</span>
    <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>What is the <code class="language-plaintext highlighter-rouge">yarn.lock</code> file?
    <ol>
      <li>It isn’t auto-generated file by either NPM or a yarn that locks the version of all the packages inside of our application within a specific range based on the rules that we set inside of package.</li>
      <li>Without <code class="language-plaintext highlighter-rouge">'^'</code> this Caret symbol, the <code class="language-plaintext highlighter-rouge">yarn.lock</code> file, the version of React and ReactDOM and React scripts are locked exactly that version, the fixed version shows in <code class="language-plaintext highlighter-rouge">package.json</code> file.</li>
      <li>However, when we added this caret <code class="language-plaintext highlighter-rouge">'^'</code>, it gives more flexibility which means the <code class="language-plaintext highlighter-rouge">yarn.lock</code> file is out of date and needs to be updated. And this file only updates whenever you run <code class="language-plaintext highlighter-rouge">yarn install</code>.</li>
    </ol>
  </li>
  <li>And why we need this file?
    <ol>
      <li>If there are multiple people are working on this application they are all using versions of dependencies that don’t conflict with each other, because maybe some people are running React ‘17.0.0’ someone is running React ‘16.0.0.’, and there is difference in features that might be breaking in the application.</li>
      <li>So <code class="language-plaintext highlighter-rouge">yarn.lock</code> file just ensures everybody is using a consistent version of these dependencies.</li>
      <li>After we run <code class="language-plaintext highlighter-rouge">yarn.lock</code> file, we generated a new lock file. From now on, you can simply run your yarn upgrade whenever you want to upgrade these dependencies.</li>
    </ol>
  </li>
</ul>

<h3 id="one-main-difference-between-yarn-and-npm">One main difference between <strong><em>yarn</em></strong> and <strong><em>npm</em></strong></h3>
<ul>
  <li>This command <code class="language-plaintext highlighter-rouge">npm audit fix</code> will go through and update the versions to a version of a package where it doesn’t have a security concern anymore.</li>
  <li>While, yarn doesn’t have this command, we only can install and upgrade all the packages that you see with a vulnerability.</li>
</ul>

<h3 id="what-is-virtual-dom">What is Virtual DOM?</h3>
<ul>
  <li>Virtual DOM is a javascript object. It’s a way to emulate the Real DOM.</li>
</ul>

<h3 id="state-updates-are-asynchronous-you-should-pass-a-function-as-the-first-parameter-in-the-setstate-to-update-the-state-synchronously">State updates are asynchronous!!! You should Pass a function as the first parameter in the setState() to update the state synchronously!!!</h3>

<h3 id="react-concepts">React Concepts</h3>
<ol>
  <li>Don’t touch the DOM. I’ll do it</li>
  <li>Build websites like lego blocks</li>
  <li>Unidirectional data flow</li>
  <li>UI, The rest is up to you</li>
</ol>

<h3 id="the-job-of-a-senior-react-developer">The job of a SENIOR React Developer</h3>
<p>1.Decide on Components</p>
<ol>
  <li>Decide the State and where it lives</li>
  <li>What changes when state changes</li>
  <li><strong><em>This idea of deciding on components, deciding about the state and where it lists what happens when state changes because of user action. These all things that nobody is going  to tell you. These are things that is dependent on each app that you built.</em></strong></li>
  <li><strong><em>What the senior developers have had this ability to think for themselves not just follow a tutorial but actually implement these things based on knowledge and experience that they’ve gathered.</em></strong></li>
</ol>

<h3 id="the-benefit-of-using-arrow-function-in-jsx">The Benefit of using Arrow Function in JSX!!!</h3>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">this</code> keyword with arrow function points to the current class object <code class="language-plaintext highlighter-rouge">NameForm</code> . However, without arrow function, you should manually bind the methods to current class object <code class="language-plaintext highlighter-rouge">NameForm</code>. Otherwise, <code class="language-plaintext highlighter-rouge">this</code> will point to global object <code class="language-plaintext highlighter-rouge">window</code>. Therefore, we can downsize the code by using arrow function.</p>
</blockquote>

<h4 id="example-1">Example 1:</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Code without Arrow function</span>
<span class="kd">class</span> <span class="nx">NameForm</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="dl">''</span><span class="p">};</span>
    <span class="c1">// you need to manually bind the methods to the current class object</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">handleChange</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleChange</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">handleSubmit</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleSubmit</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">handleChange</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="na">value</span><span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">handleSubmit</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">A name was submitted: </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSubmit</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span>
          <span class="nx">Name</span><span class="p">:</span>
          <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleChange</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Submit</span><span class="dl">"</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="example-2">Example 2:</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Code with Arrow function</span>
<span class="kd">class</span> <span class="nx">NameForm</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span><span class="na">value</span><span class="p">:</span> <span class="dl">''</span><span class="p">};</span>
  <span class="p">}</span>

  <span class="nx">handleChange</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="na">value</span><span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">handleSubmit</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">A name was submitted: </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleSubmit</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">label</span><span class="o">&gt;</span>
          <span class="nx">Name</span><span class="p">:</span>
          <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">}</span> <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleChange</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span> <span class="nx">value</span><span class="o">=</span><span class="dl">"</span><span class="s2">Submit</span><span class="dl">"</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

]]></content>
      <categories>
        
          <category> React </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Loader and Plugins]]></title>
      <url>/javascript/2020/12/24/Loader_and_Plugins/</url>
      <content type="html"><![CDATA[<blockquote>
  <p>Source: <a href="https://stackoverflow.com/questions/37452402/webpack-loaders-vs-plugins-whats-the-difference#:~:text=Loaders%20work%20at%20the%20individual,the%20bundles%20themselves%20are%20created.">Loader and plugin!</a></p>

  <p>Another Article: <a href="https://imranhsayed.medium.com/webpack-loaders-and-plugins-e13f79fe6b32">Webpack Loaders and Plugins!</a></p>
</blockquote>

<h3 id="loaders">Loaders</h3>
<p>Loaders work at the individual file level during or before the bundle is generated.</p>

<h3 id="plugins">Plugins</h3>
<p>Plugins work at bundle or chunk level and usually work at the end of the bundler generation process. Plugins can also modify how the bundles themselves are created. Plugins have more powerful control than loaders.</p>

<h4 id="just-for-an-example-you-can-clearly-see-in-below-image-where-loaders-are-working-and-where-plugins-are-working">Just for an example you can clearly see in below image where loaders are working and where plugins are working.</h4>
<p><img src="../../../../../assets/images/loader.png" width="800" /></p>

<h4 id="another-example-of-loaders-and-plugins">Another example of Loaders and Plugins</h4>
<p><img src="../../../../../assets/images/webpack-loaders-and-plugins.png" width="800" /></p>

]]></content>
      <categories>
        
          <category> Javascript </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[MVC and Event Bus]]></title>
      <url>/javascript/2020/12/21/MVC_EventBus/</url>
      <content type="html"><![CDATA[<h3 id="what-is-mvc-give-code-example">What is MVC, give code example.</h3>
<blockquote>
  <p>M: Model is used to store data and manipulate all the data.</p>

  <p>V: View is responsible for all UI interface.</p>

  <p>C: Controller is responsible for modifying data you want</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">eventBus</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">)</span>
  <span class="c1">// put all data related data into the Model</span>
  <span class="kd">const</span> <span class="nx">m</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">n</span><span class="p">:</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">localStorage</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">n</span><span class="dl">'</span><span class="p">))</span>
    <span class="p">},</span>
    <span class="nx">create</span><span class="p">(){},</span>
    <span class="k">delete</span><span class="p">(){},</span>
    <span class="nx">update</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
      <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
      <span class="nx">eventBus</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="dl">'</span><span class="s1">m:updated</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="kd">get</span><span class="p">(){}</span>
  <span class="p">}</span>


<span class="c1">// put all view related code in the view</span>
<span class="kd">const</span> <span class="nx">v</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">el</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span>
  <span class="na">html</span><span class="p">:</span> <span class="s2">`&lt;div...&gt;`</span><span class="p">,</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">){</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">el</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="nx">render</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">empty</span><span class="p">()</span>
    <span class="nx">$</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">html</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="dl">''</span><span class="p">,</span><span class="nx">n</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">el</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// the code for modifying data</span>
<span class="kd">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">){</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
    <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span>
    <span class="nx">c</span><span class="p">.</span><span class="nx">autoBindEvents</span><span class="p">()</span>
    <span class="nx">eventBus</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">m:updated</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
      <span class="nx">v</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span><span class="p">)</span>
    <span class="p">})</span>
  <span class="p">},</span>
  <span class="na">events</span><span class="p">:{</span>
    <span class="dl">'</span><span class="s1">click #add1</span><span class="dl">'</span><span class="p">:</span><span class="dl">'</span><span class="s1">add</span><span class="dl">'</span><span class="p">,</span>
    <span class="dl">'</span><span class="s1">click #minus1</span><span class="dl">'</span><span class="p">:</span><span class="dl">'</span><span class="s1">minus</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">}</span>
  <span class="nx">add</span><span class="p">(){</span>
    <span class="nx">m</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span><span class="na">n</span><span class="p">:</span> <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">})</span>
  <span class="p">},</span>
  <span class="nx">minus</span><span class="p">(){</span>
    <span class="nx">m</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span><span class="na">n</span><span class="p">:</span> <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">-</span><span class="mi">1</span><span class="p">})</span>
  <span class="p">},</span>
  <span class="nx">autoBindEvents</span><span class="p">(){</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">c</span><span class="p">.</span><span class="nx">events</span><span class="p">){</span>
      <span class="nx">c</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">something</span> <span class="nx">there</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>
<h3 id="what-api-does-eventbus-include-what-does-those-api-use-for-code-example">What API does EventBus include? What does those API use for? Code Example.</h3>
<p><code class="language-plaintext highlighter-rouge">const eventBus = (window);</code></p>
<blockquote>
  <p>({}) is an empty object, there is no need to fetch elements, it only fetch three o APIs, <code class="language-plaintext highlighter-rouge">on</code> event, <code class="language-plaintext highlighter-rouge">off</code> event, <code class="language-plaintext highlighter-rouge">trigger</code> event</p>
</blockquote>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">eventBus.on(types, selector, data,fn)</code>
<code class="language-plaintext highlighter-rouge">eventBus.trigger(type, data)</code></p>
</blockquote>

<h3 id="what-is-excel-driven-programming">What is Excel-Driven Programming?</h3>
<ul>
  <li>bind events automatically</li>
  <li>when we will bind a bunch of events, we will change these events into a hash table first, and then implement the auto-binding
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">c</span> <span class="p">{</span>
  <span class="nl">events</span> <span class="p">:</span> <span class="p">{</span>
          <span class="dl">'</span><span class="s1">click #add1</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">add</span><span class="dl">'</span><span class="p">,</span>
          <span class="dl">'</span><span class="s1">click #minus1</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">minus</span><span class="dl">'</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="nx">add</span><span class="p">(){</span>
          <span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
      <span class="p">},</span>
      <span class="nx">minus</span><span class="p">(){</span>
          <span class="nx">thism</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">n</span> <span class="o">-=</span><span class="mi">1</span><span class="p">;</span>
      <span class="p">},</span>
      <span class="nx">autoBindEvents</span><span class="p">(){</span>
          <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">c</span><span class="p">.</span><span class="nx">events</span><span class="p">){</span>
              <span class="nx">c</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">xx</span><span class="p">,</span><span class="nx">xx</span><span class="p">,</span><span class="nx">xx</span><span class="p">)</span>
          <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="how-to-understanding-module">How to understanding Module?</h3>
<blockquote>
  <p>The code forms a set of fixed templates, does not need the programmer to write code from scratch, can achieve most of the requirements of the work, rapid development becomes possible,
The cost is that the code sometimes doesn’t use that much, it can be wasteful, or in very demanding cases, modularity can become a constraint</p>
</blockquote>

]]></content>
      <categories>
        
          <category> Javascript </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Tagged Template]]></title>
      <url>/javascript/2020/12/18/Tagged_Template/</url>
      <content type="html"><![CDATA[<p><strong>Example 1</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Mike</span><span class="dl">'</span>
  <span class="kd">let</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">28</span>

  <span class="kd">function</span> <span class="nx">myTag</span><span class="p">(</span><span class="nx">strings</span><span class="p">,</span> <span class="nx">personExp</span><span class="p">,</span> <span class="nx">ageExp</span><span class="p">){</span>
    <span class="kd">let</span> <span class="nx">str0</span> <span class="o">=</span> <span class="nx">strings</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1">// "That "</span>
    <span class="kd">let</span> <span class="nx">str1</span> <span class="o">=</span> <span class="nx">strings</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c1">// " is a "</span>

    <span class="c1">// There is technically a string after the final expression (in our example),</span>
    <span class="c1">// but it is empty ("empty"), so disregard. let str2 = strings[2]</span>

    <span class="kd">let</span> <span class="nx">ageStr</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">ageExp</span> <span class="o">&gt;</span> <span class="mi">9</span><span class="p">){</span>
      <span class="nx">ageStr</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">centenarian</span><span class="dl">'</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nx">ageStr</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">youngster</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// we can even return a string built using a template literal</span>
  <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="nx">str0</span><span class="p">}${</span><span class="nx">personExp</span><span class="p">}${</span><span class="nx">str1</span><span class="p">}${</span><span class="nx">ageStr</span><span class="p">}</span><span class="s2">`</span>
<span class="p">}</span>

  <span class="kd">let</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">myTag</span><span class="s2">`That </span><span class="p">${</span><span class="nx">person</span><span class="p">}</span><span class="s2"> is a </span><span class="p">${</span><span class="nx">age</span><span class="p">}</span><span class="s2">`</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">output</span><span class="p">)</span>
  <span class="c1">// result: That Mike is a youngster</span>
</code></pre></div></div>

<p><strong>Example 2</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">author</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Some Author</span><span class="dl">"</span>
  <span class="kd">const</span> <span class="nx">statement</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Some Statement</span><span class="dl">"</span>
  <span class="kd">const</span> <span class="nx">third</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Last One</span><span class="dl">"</span>

  <span class="kd">var</span> <span class="nx">quote</span> <span class="o">=</span> <span class="nx">highlight</span><span class="s2">`Here is the </span><span class="p">${</span><span class="nx">statement</span><span class="p">}</span><span class="s2"> by </span><span class="p">${</span><span class="nx">author</span><span class="p">}</span><span class="s2"> and it could not be more true </span><span class="p">${</span><span class="nx">third</span><span class="p">}</span><span class="s2">`</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">quote</span><span class="p">)</span>

  <span class="c1">// function highlight(text, arg1, arg2){</span>
  <span class="c1">//   console.log(text)</span>
  <span class="c1">//   console.log(arg1)</span>
  <span class="c1">//   console.log(arg2)</span>
  <span class="c1">//   console.log({text, arg1,arg2})</span>
  <span class="c1">// }</span>


  <span class="c1">// advanced code</span>
  <span class="kd">function</span> <span class="nx">highlight</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="p">...</span><span class="nx">vars</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span><span class="nx">text</span><span class="p">,</span> <span class="nx">vars</span><span class="p">})</span>
  <span class="p">}</span>
  <span class="c1">// result</span>
  <span class="c1">// {text: Array(4), vars: Array(3)}</span>
  <span class="c1">// text: (4) ["Here is the ", " by ", " and it could not be more true ", "", raw: Array(4)]</span>
  <span class="c1">// vars: (3) ["Some Statement", "Some Author", "last one"]</span>
  <span class="c1">// __proto__: Object</span>


<span class="c1">// more advanced code with rest operator</span>
<span class="kd">function</span> <span class="nx">highlight</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="p">...</span><span class="nx">vars</span><span class="p">){</span>
  <span class="kd">const</span> <span class="nx">awesomeText</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="nx">item</span><span class="p">}</span><span class="s2"> &lt;strong class="blue"&gt;</span><span class="p">${</span><span class="nx">vars</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="o">||</span> <span class="dl">""</span><span class="p">}</span><span class="s2"> &lt;/strong&gt;`</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">awesomeText</span><span class="p">,</span><span class="nx">join</span><span class="p">(</span><span class="dl">""</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

]]></content>
      <categories>
        
          <category> Javascript </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Usage of Parcel]]></title>
      <url>/server/2020/12/14/usage_of_parcel/</url>
      <content type="html"><![CDATA[<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="mi">1</span><span class="p">.</span> <span class="nx">rm</span> <span class="o">-</span><span class="nx">rf</span> <span class="nx">dist</span> <span class="c1">// this is clear the dist if you want to build a brand new parcel of your code</span>
  <span class="mi">2</span><span class="p">.</span> <span class="nx">parcel</span> <span class="nx">build</span> <span class="nx">src</span><span class="o">/</span><span class="nx">index</span><span class="p">.</span><span class="nx">html</span> <span class="o">--</span><span class="nx">no</span><span class="o">-</span><span class="nx">minify</span> <span class="o">--</span><span class="kr">public</span><span class="o">-</span><span class="nx">url</span> <span class="p">.</span><span class="o">/</span>

  <span class="nx">https</span><span class="p">:</span><span class="c1">//yueran-yu.github.io/JRG-Course/NavigationPage/dist/</span>

  <span class="c1">//this path that will show for user to click</span>

  <span class="c1">// The complete Parcel command</span>
  <span class="nx">parcel</span> <span class="o">--</span><span class="nx">help</span> <span class="c1">// look into the document parcel</span>

  <span class="c1">// add absolute path</span>
  <span class="nx">parcel</span> <span class="nx">build</span> <span class="nx">src</span><span class="o">/</span><span class="nx">index</span><span class="p">.</span><span class="nx">html</span> <span class="o">--</span><span class="nx">no</span><span class="o">-</span><span class="nx">minify</span> <span class="o">--</span><span class="kr">public</span><span class="o">-</span><span class="nx">url</span>  <span class="nx">https</span><span class="p">:</span><span class="c1">//yueran-yu.github.io/JRG-Course/NavigationPage/dist/</span>

  <span class="c1">// add relative path</span>
  <span class="nx">parcel</span> <span class="nx">build</span> <span class="nx">src</span><span class="o">/</span><span class="nx">index</span><span class="p">.</span><span class="nx">html</span> <span class="o">--</span><span class="nx">no</span><span class="o">-</span><span class="nx">minify</span> <span class="o">--</span><span class="kr">public</span><span class="o">-</span><span class="nx">url</span> <span class="p">.</span><span class="o">/</span>

  <span class="c1">// create a /gitignore file to ignore .idea and node_modules/</span>
  <span class="mi">3</span><span class="p">.</span> <span class="p">.</span><span class="nx">gitignore</span>
</code></pre></div></div>
<blockquote>
  <p>You also can add the the <code class="language-plaintext highlighter-rouge">Parcel</code> command into the <code class="language-plaintext highlighter-rouge">package.json</code> file</p>
  <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">build</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">rm -rf dist; parcel build src/index.html --no-minify ./</span><span class="dl">"</span>
      <span class="c1">// here is the sentence you need to add to;  window system may not support ';' after 'dist'</span>
      <span class="p">},</span>
      <span class="dl">"</span><span class="s2">devDependencies</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">cssnano</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^4.1.10</span><span class="dl">"</span>
      <span class="p">},</span>
      <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">NavigationPage</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1.0.0</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">main</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">index.js</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">license</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">MIT</span><span class="dl">"</span>
      <span class="p">}</span>
</code></pre></div>  </div>
  <p>You can run the <code class="language-plaintext highlighter-rouge">Parcel</code> next time by typing <strong><code class="language-plaintext highlighter-rouge">yarn build</code></strong> in the terminal</p>
</blockquote>

<p><a href="https://yueran-yu.github.io/JRG-Course/NavigationPage/dist/index.html">My Website Link: Front-End Navigation</a></p>

]]></content>
      <categories>
        
          <category> Server </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[jQuery Notes]]></title>
      <url>/jquery/2020/12/11/jQuery_notes/</url>
      <content type="html"><![CDATA[<h3 id="bubbling--capturing">Bubbling &amp; Capturing</h3>
<p><a href="https://stackoverflow.com/questions/4616694/what-is-event-bubbling-and-capturing">Reference: What is event Bubbling and Capturing?</a></p>

<blockquote>
  <p>Event bubbling and capturing are two ways of event propagation in the HTML DOM API, when an event occurs in an element inside another element, and both elements have registered a handle for that event. The event propagation mode determines in which order the elements receive the event.</p>
</blockquote>

<h3 id="what-is-bubbling">What is Bubbling</h3>
<blockquote>
  <p>With bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements.</p>
</blockquote>

<h3 id="what-is-capturing">What is Capturing</h3>
<blockquote>
  <p>With capturing, the event is first captured by the outermost element and propagated to the inner elements.</p>
</blockquote>

<blockquote>
  <p>We can use the <code class="language-plaintext highlighter-rouge">addEventListener(type, listener, useCapture)</code> to register handlers for in either <code class="language-plaintext highlighter-rouge">bubbling(default)</code> or <code class="language-plaintext highlighter-rouge">capturing</code> mode, To use the capturing model pass the third argument as <code class="language-plaintext highlighter-rouge">true</code>.</p>

</blockquote>

<p><strong>Example</strong></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
        <span class="nt">&lt;li&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<blockquote>
  <p>In the structure above, assume that a click event occurred in the <code class="language-plaintext highlighter-rouge">li</code> element.
In capturing model, the event will be handled by the <code class="language-plaintext highlighter-rouge">div</code> first(click event handlers in the <code class="language-plaintext highlighter-rouge">div</code> will fire first), then in the <code class="language-plaintext highlighter-rouge">ul</code>, then at the last in the target element, <code class="language-plaintext highlighter-rouge">li</code>.
In the bubbling model, the opposite will happen: the event will be first handled by the <code class="language-plaintext highlighter-rouge">li</code>, then by the <code class="language-plaintext highlighter-rouge">ul</code>, and at last by the <code class="language-plaintext highlighter-rouge">div</code> element.</p>
</blockquote>

<blockquote>
  <p>In the example below, if you click on any of the highlighted elements, you can see that the capturing phase of the event propagation flow occurs first, followed by the bubbling phase.</p>

  <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;div&gt;</span>1
        <span class="nt">&lt;div&gt;</span>2
            <span class="nt">&lt;div&gt;</span>3
                <span class="nt">&lt;div&gt;</span>4
                    <span class="nt">&lt;div&gt;</span>5<span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"clear"</span><span class="nt">&gt;</span>clear output<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">"log"</span><span class="nt">&gt;&lt;/section&gt;</span>
</code></pre></div>  </div>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">var</span> <span class="nx">logElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">log</span><span class="dl">'</span><span class="p">)</span>

    <span class="kd">function</span> <span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">){</span>
        <span class="nx">logElement</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="p">(</span><span class="dl">'</span><span class="s1">&lt;p&gt;</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">msg</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">&lt;/p&gt;</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">capture</span><span class="p">(){</span>
        <span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">capture: </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">.</span><span class="nx">trim</span><span class="p">())</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">bubble</span><span class="p">(){</span>
        <span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">bubble: </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">.</span><span class="nx">nodeValue</span><span class="p">.</span><span class="nx">trim</span><span class="p">())</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">clearOutput</span><span class="p">(){</span>
        <span class="nx">logElement</span><span class="p">.</span><span class="nx">innerElement</span> <span class="o">=</span> <span class="dl">""</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">divs</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">)</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">divs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
        <span class="nx">divs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="nx">capture</span><span class="p">,</span><span class="kc">true</span><span class="p">)</span>
        <span class="nx">divs</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="nx">bubble</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">clearButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">clear</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">clearButton</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="nx">clearOutput</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="about-the-order-of-capture-and-bubble">About the Order Of Capture and Bubble</h3>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"div1"</span><span class="nt">&gt;</span>1
        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"div2"</span><span class="nt">&gt;</span>2<span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"div3"</span><span class="nt">&gt;</span>3<span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1">// V. 1</span>
    <span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div1, here is bubble</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div1, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span><span class="kc">true</span><span class="p">)</span>
    <span class="c1">//Click div1, Order: div1-bubble =&gt; div1-capture</span>

    <span class="nx">div2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div2, here is bubble</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="nx">div2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div2, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span> <span class="kc">true</span><span class="p">)</span>

    <span class="c1">//Click div2, Order: div1-capture =&gt; div2-bubble =&gt; div2-capture =&gt; div1-bubble</span>

    <span class="nx">div3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div3, here is bubble</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="nx">div3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div3, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span> <span class="kc">true</span><span class="p">)</span>
    <span class="c1">//Click div3, Order: div1-capture =&gt; div3-bubble =&gt; div3-capture =&gt; div1-bubble</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// V. 2</span>
    <span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div1, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span><span class="kc">true</span><span class="p">)</span>

    <span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div1, here is bubble</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="c1">//Click div1, Order: div1-capture =&gt; div1-bubble</span>


     <span class="nx">div2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div2, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span> <span class="kc">true</span><span class="p">)</span>
    <span class="nx">div2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div2, here is bubble</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="c1">//Click div2, Order: div1-capture =&gt; div2-capture =&gt; div2-bubble =&gt; div1-bubble</span>

    <span class="nx">div3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div3, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span> <span class="kc">true</span><span class="p">)</span>
    <span class="nx">div3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div3, here is bubble</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
     <span class="c1">//Click div2, Order: div1-capture =&gt; div3-capture =&gt; div3-bubble =&gt; div1-bubble</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// V. 3</span>
    <span class="nx">div2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div2, here is bubble</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="nx">div2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div2, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span> <span class="kc">true</span><span class="p">)</span>
    <span class="c1">//Click div2, Order: div1-capture =&gt; div2-bubble =&gt; div2-capture =&gt; div1-bubble</span>

    <span class="nx">div3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div3, here is bubble</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="nx">div3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div3, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span> <span class="kc">true</span><span class="p">)</span>
    <span class="c1">//Click div3, Order: div1-capture =&gt; div3-bubble =&gt; div3-capture =&gt; div1-bubble</span>

     <span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div1, here is bubble</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div1, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span><span class="kc">true</span><span class="p">)</span>
    <span class="c1">//Click div1, Order: div1-bubble =&gt; div1-capture</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// V. 4</span>
    <span class="nx">div2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div2, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span> <span class="kc">true</span><span class="p">)</span>
    <span class="nx">div2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div2, here is bubble</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="c1">//Click div2, Order: div1-capture =&gt; div2-capture =&gt; div2-bubble =&gt; div1-bubble</span>

    <span class="nx">div3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div3, here is bubble</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="nx">div3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div3, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span> <span class="kc">true</span><span class="p">)</span>
    <span class="c1">//Click div3, Order: div1-capture =&gt; div3-bubble =&gt; div3-capture =&gt; div1-bubble</span>

    <span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div1, here is bubble</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div1, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span><span class="kc">true</span><span class="p">)</span>
    <span class="c1">//Click div1, Order: div1-bubble =&gt; div1-capture</span>
</code></pre></div></div>
<p><a href="https://www.quirksmode.org/js/events_order.html">Reference: Event Order</a></p>

<h3 id="target-vs-currenttarget">Target VS. CurrentTarget</h3>
<p><strong>Example</strong></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"div1"</span> <span class="na">data-id = </span><span class="s">"1"</span><span class="nt">&gt;</span>1
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"div2"</span> <span class="na">data-id = </span><span class="s">"2"</span><span class="nt">&gt;</span>2<span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"div3"</span> <span class="na">data-id = </span><span class="s">"3"</span><span class="nt">&gt;</span>3<span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// test e.currentTarget and e.target</span>
    <span class="nx">div2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div2, here is capture </span><span class="dl">'</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">target: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">currentTarget: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
    <span class="p">},</span> <span class="kc">true</span><span class="p">)</span>


    <span class="nx">div2</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div2, here is bubble </span><span class="dl">'</span>  <span class="o">+</span> <span class="dl">'</span><span class="s1">target: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> currentTarget: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
    <span class="p">})</span>

    <span class="nx">div3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div3, here is bubble</span><span class="dl">'</span><span class="p">)</span>

    <span class="p">})</span>
    <span class="nx">div3</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div3, here is capture</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">},</span> <span class="kc">true</span><span class="p">)</span>


    <span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,(</span><span class="nx">e</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div1, here is bubble </span><span class="dl">'</span>  <span class="o">+</span> <span class="dl">'</span><span class="s1">target: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> currentTarget: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
    <span class="p">})</span>
    <span class="nx">div1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,(</span><span class="nx">e</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">div1, here is capture </span><span class="dl">'</span>  <span class="o">+</span> <span class="dl">'</span><span class="s1">target: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> currentTarget: </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
    <span class="p">},</span><span class="kc">true</span><span class="p">)</span>
</code></pre></div></div>
<h3 id="event-delegation">Event Delegation</h3>
<blockquote>
  <p>DOM event delegation is a  mechanism of responding to ui-events via a single common parent rather than each child, through the magic of event “bubbling”.</p>

  <p>Event bubbling provides the foundation for event delegation in browsers. Now you can bind an event handler to a single parent element, and that handler will get executed whenever the event occurs on any of its child nodes(and any of their children in turn)  <code class="language-plaintext highlighter-rouge">This is event delegation</code>. Here is an example of it in practice.</p>
</blockquote>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;ul</span> <span class="na">onclick=</span><span class="s">"alert(event.type + '!')"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;li&gt;</span>One<span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;li&gt;</span>Two<span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;li&gt;</span>Three<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
</code></pre></div></div>
<blockquote>
  <p>With that example if you were to click on any of the child <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> nodes, you would see an alert of <code class="language-plaintext highlighter-rouge">"click"</code>, even though there is no click handler bound to the <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code>  you clicked on. If we bound <code class="language-plaintext highlighter-rouge">onclick="..."</code> to each <code class="language-plaintext highlighter-rouge">&lt;li&gt;</code> you would get the same effect.</p>

</blockquote>

<h3 id="the-benefit-of-event-delegation">The Benefit of Event Delegation</h3>
<p><a href="https://stackoverflow.com/questions/1687296/what-is-dom-event-delegation">Reference: What’s the benefit?</a></p>

<h3 id="how-to-reference-jquery">How to Reference jQuery?</h3>
<blockquote>
  <p>Make sure jQuery is loaded before your code. So for instance:</p>

  <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"http://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"your-code.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    Or
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"http://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script&gt;</span>
    <span class="c1">// Your code</span>
    <span class="nt">&lt;/script&gt;</span>
    NOT:
    <span class="c">&lt;!-- Not like this --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"your-code.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"http://ajax.googleapis.com/ajax/libs/jquery/2.0.2/jquery.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div>  </div>
</blockquote>

]]></content>
      <categories>
        
          <category> jQuery </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Javascript Execution Timing]]></title>
      <url>/javascript/2020/12/05/js-execution_timing/</url>
      <content type="html"><![CDATA[<h3 id="函数的执行时机">函数的执行时机</h3>

<ol>
  <li>解释为什么如下代码会打印 6 个 6
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
 <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>答： setTimeout会等到for loop的 i &lt; 6 一直循环完，才会执行，setTimeout在这里就像个闹钟，只有等到 for loop循环完，setTimeout这个闹钟才会执行。</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">setTimeout</code> function in Javascript usually takes a callback function as an argument. A callback function is a function that is executed after another function finishes running. In this case, it will run after for loop finishes. At this point, <code class="language-plaintext highlighter-rouge">i</code> is already 5 when the <code class="language-plaintext highlighter-rouge">console.log([array[i])</code> is about to be executed. Due to the <strong>Closure</strong> of javascript, <code class="language-plaintext highlighter-rouge">the console.log</code> has access to the i = 5 which is defined as an other outer layer of the setTimeout.</p>
</blockquote>

<ol>
  <li>写出让上面代码打印 0、1、2、3、4、5 的方法
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">6</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
  <span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
 <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">},</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>
]]></content>
      <categories>
        
          <category> Javascript </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Javascript Function]]></title>
      <url>/javascript/2020/12/02/javascript_function/</url>
      <content type="html"><![CDATA[<h3 id="key-concepts-about-function">Key concepts about function</h3>
<ul>
  <li>Call time</li>
  <li>Scope</li>
  <li>Closure</li>
  <li>Parameter</li>
  <li>Return value</li>
  <li>Call Stack</li>
  <li>Hoisting</li>
  <li>Arguments (except arrow function)</li>
  <li>This</li>
</ul>

<p><img src="../../../../../assets/images/Closure.png" width="400" alt="closure" />
<img src="../../../../../assets/images/func_hoisting.png" width="400" alt="func_hoisting.png" />
<img src="../../../../../assets/images/JS_FUNCTION1.png" width="400" alt="" />
<img src="../../../../../assets/images/JS_FUNCTION2.png" width="400" alt="" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">fn</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// if you don't give any condition to the function, 'this' will point to the 'window'</span>
</code></pre></div></div>
<h3 id="if-you-dont-give-any-condition-to-the-function-this-will-point-to-the-window">if you don’t give any condition to the function, ‘this’ will point to the ‘window’</h3>

<h4 id="we-must-use">We must use:</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">,</span>
<span class="nx">sayHi</span><span class="p">(){</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
</code></pre></div></div>
<p><img src="../../../../../assets/images/why_use_this.png" width="400" alt="why_use_this.png" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span>
<span class="p">}</span>

<span class="nx">add</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">undefined</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="c1">// first value used to occupy the position</span>
</code></pre></div></div>

<h3 id="arrow-function">Arrow Function</h3>
<ul>
  <li><strong>Regular function ‘this’ refers parent, left of the dot</strong></li>
  <li><strong>Arrow function refers to it’s current surrounding scope</strong>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// regular function</span>
<span class="kd">const</span> <span class="nx">bob</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bob</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">smith</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">sayName</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nb">self</span> <span class="o">=</span> <span class="k">this</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello, my name is </span><span class="p">${</span><span class="nb">self</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nb">self</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">})</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">bob</span><span class="p">.</span><span class="nx">sayName</span><span class="p">()</span>
<span class="c1">//result: Hello, my name is bob smith</span>
</code></pre></div>    </div>
  </li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// arrow function</span>
  <span class="kd">const</span> <span class="nx">bob1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bob</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">lastName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">smith</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">sayName</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello, my name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
      <span class="p">})</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="nx">bob1</span><span class="p">.</span><span class="nx">sayName</span><span class="p">()</span>
<span class="c1">// Hello, my name is bob smith</span>

</code></pre></div></div>

<h3 id="arrow-function-hoisting">Arrow Function Hoisting</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// sayHi() is a normal function</span>
  <span class="nx">sayHi</span><span class="p">()</span>
  <span class="kd">const</span> <span class="nx">john</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">john</span><span class="dl">'</span>
  <span class="kd">const</span> <span class="nx">peter</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Peter</span><span class="dl">'</span>

  <span class="kd">function</span> <span class="nx">sayHi</span><span class="p">(</span><span class="nx">person</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Susan</span><span class="dl">"</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hi </span><span class="p">${</span><span class="nx">person</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="c1">// this is an arrow function, but called before it initialized</span>
  <span class="nx">sayHello</span><span class="p">()</span>
  <span class="kd">const</span> <span class="nx">sayHello</span> <span class="o">=</span> <span class="p">(</span><span class="nx">person</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Bob</span><span class="dl">"</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello </span><span class="p">${</span><span class="nx">person</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
</code></pre></div></div>
<h3 id="array-destructing">Array Destructing</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Array destructing</span>
  <span class="kd">const</span> <span class="nx">friends</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">john</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">peter</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">bob</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">alice</span><span class="dl">'</span><span class="p">]</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">x</span><span class="p">]</span> <span class="o">=</span> <span class="nx">friends</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">x</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="object-destructing">Object Destructing</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// Object destructing</span>
    <span class="kd">const</span> <span class="nx">bob</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">first</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bob</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">last</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sanders</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">city</span><span class="p">:</span> <span class="dl">'</span><span class="s1">chicago</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">siblings</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">sister</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jane</span><span class="dl">'</span>
      <span class="p">},</span>
    <span class="p">}</span>

    <span class="kd">const</span> <span class="p">{</span>
      <span class="na">first</span><span class="p">:</span> <span class="nx">firstName</span><span class="p">,</span>
      <span class="nx">last</span><span class="p">,</span>
      <span class="nx">city</span><span class="p">,</span>
      <span class="nx">zip</span><span class="p">,</span>
      <span class="nx">hop</span><span class="p">,</span>
      <span class="na">siblings</span><span class="p">:</span> <span class="p">{</span><span class="na">sister</span><span class="p">:</span> <span class="nx">favoriteSibling</span><span class="p">},</span>
    <span class="p">}</span> <span class="o">=</span> <span class="nx">bob</span><span class="p">;</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstName</span><span class="p">,</span> <span class="nx">last</span><span class="p">,</span> <span class="nx">city</span><span class="p">,</span> <span class="nx">hop</span><span class="p">,</span><span class="nx">favoriteSibling</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="static-scoping-vs-dynamic-scoping">Static Scoping VS Dynamic Scoping</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">fn1</span><span class="p">(){</span>

    <span class="kd">function</span> <span class="nx">fn2</span><span class="p">(){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// when the fn2 function has a parameter, the final result will be  4</span>
    <span class="c1">// function fn2(a){</span>
    <span class="c1">// console.log(a)</span>
    <span class="c1">// }</span>

    <span class="kd">function</span> <span class="nx">fn3</span><span class="p">(){</span>
        <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">4</span>
        <span class="nx">fn2</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="k">return</span> <span class="nx">fn3</span>
  <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nx">fn1</span><span class="p">()</span>
    <span class="nx">fn</span><span class="p">()</span> <span class="c1">// result: 2</span>
</code></pre></div></div>
<p><strong>Answer:</strong></p>
<blockquote>
  <p>静态作用域，看定义的位置，跟在哪调用无关, fn2中没有a，就会去它定义的上一层中找，就是fn1中, 跟在哪调用无关，因为JS是静态作用域的，只看它在何处定义的.</p>

  <p>我的想法是动态作用域的想法，会在运行时沿着调用链查找；但是JS规定的是静态作用域，一个变量定义的那一刻，作用域就已经确定了，跟调用毛关系没有</p>
</blockquote>

]]></content>
      <categories>
        
          <category> Javascript </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Javascript Array]]></title>
      <url>/javascript/2020/11/25/javascript_array/</url>
      <content type="html"><![CDATA[<h3 id="create-an-array">Create an Array</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

  <span class="c1">// Transform</span>
  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">1,2,3</span><span class="dl">'</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">123</span><span class="dl">'</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">''</span><span class="p">)</span>
  <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="dl">'</span><span class="s1">123</span><span class="dl">'</span><span class="p">)</span>
  <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">({</span><span class="mi">0</span><span class="p">:</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="dl">'</span><span class="s1">d</span><span class="dl">'</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span><span class="mi">4</span><span class="p">})</span>

  <span class="c1">//Special occasion</span>
  <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">({</span><span class="mi">0</span><span class="p">:</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span><span class="mi">1</span><span class="p">:</span><span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span><span class="dl">'</span><span class="s1">d</span><span class="dl">'</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
  <span class="c1">// result: (2)["a", "b"]</span>
</code></pre></div></div>
<h3 id="pseudo-array">Pseudo-Array</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span><span class="mi">1</span><span class="p">:</span><span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="dl">'</span><span class="s1">c</span><span class="dl">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span><span class="dl">'</span><span class="s1">d</span><span class="dl">'</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
  <span class="c1">// here is the prototype chain of the pseudo-array arr</span>
  <span class="p">{</span><span class="mi">0</span><span class="p">:</span> <span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="dl">"</span><span class="s2">d</span><span class="dl">"</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
  <span class="mi">0</span><span class="p">:</span> <span class="dl">"</span><span class="s2">a</span><span class="dl">"</span>
  <span class="mi">1</span><span class="p">:</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span>
  <span class="mi">2</span><span class="p">:</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span>
  <span class="mi">3</span><span class="p">:</span> <span class="dl">"</span><span class="s2">d</span><span class="dl">"</span>
  <span class="nx">length</span><span class="p">:</span> <span class="mi">3</span>
  <span class="nx">__proto__</span><span class="p">:</span>
  <span class="kd">constructor</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nb">Object</span><span class="p">()</span>
  <span class="nx">hasOwnProperty</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">hasOwnProperty</span><span class="p">()</span>
  <span class="nx">isPrototypeOf</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">isPrototypeOf</span><span class="p">()</span>
  <span class="nx">propertyIsEnumerable</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">propertyIsEnumerable</span><span class="p">()</span>
  <span class="nx">toLocaleString</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">toLocaleString</span><span class="p">()</span>
  <span class="nx">toString</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">toString</span><span class="p">()</span>
  <span class="nx">valueOf</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">valueOf</span><span class="p">()</span>
  <span class="nx">__defineGetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__defineGetter__</span><span class="p">()</span>
  <span class="nx">__defineSetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__defineSetter__</span><span class="p">()</span>
  <span class="nx">__lookupGetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__lookupGetter__</span><span class="p">()</span>
  <span class="nx">__lookupSetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__lookupSetter__</span><span class="p">()</span>
  <span class="kd">get</span> <span class="nx">__proto__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__proto__</span><span class="p">()</span>
  <span class="kd">set</span> <span class="nx">__proto__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__proto__</span><span class="p">()</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">divList</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">)</span>
  <span class="c1">//伪数组的原型链中没有数组的原型</span>
  <span class="c1">// change the divList to array</span>
  <span class="kd">let</span> <span class="nx">divList</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">divList</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">divList</span><span class="p">)</span>

  <span class="c1">// combine two array</span>
  <span class="nx">arr1</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">arr2</span><span class="p">)</span>
  <span class="c1">//truncate a part from an array</span>
  <span class="nx">arr1</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// start from the second element</span>
  <span class="nx">arr1</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">// truncate all</span>

  <span class="c1">// !!! JS only provide shallow COPY</span>
</code></pre></div></div>
<p><img src="../../../../../assets/images/array_delete_elements.png" width="400" alt="array delete elements" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// delete the head element</span>
  <span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
  <span class="nx">array</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="c1">// 1</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="c1">//result: (2)[2,3]</span>
  <span class="kd">let</span> <span class="nx">array2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>


  <span class="c1">//delete the tail element</span>
  <span class="nx">array2</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span> <span class="c1">// 3</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array2</span><span class="p">)</span> <span class="c1">//result: (2)[1, 2]</span>
  <span class="c1">// something has changed</span>

  <span class="c1">// delete middle elements</span>
  <span class="kd">let</span> <span class="nx">array3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
  <span class="nx">array3</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// 3,4</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array3</span><span class="p">)</span> <span class="c1">//result: (2)[1, 2,5]</span>


  <span class="c1">// delete middle elements and add new elements</span>
  <span class="kd">let</span> <span class="nx">array4</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
  <span class="nx">array4</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">678</span><span class="p">)</span> <span class="c1">// 3,4</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">array4</span><span class="p">)</span> <span class="c1">//result: (8) [1, 2, 55, 24, 23, 678, 4, 5]</span>
</code></pre></div></div>

<p><img src="../../../../../assets/images/array_check_all_elements.png" width="400" alt="check all elements" />
<img src="../../../../../assets/images/array_check_single_element.png" width="400" alt="check single element" />
<img src="../../../../../assets/images/array_check_singe_2.png" width="400" alt="check single element" />
<img src="../../../../../assets/images/array_add_element.png" width="400" alt="add element" />
<img src="../../../../../assets/images/array_add_element2.png" width="400" alt="add element" />
<img src="../../../../../assets/images/array_transform.png" width="400" alt="array_transform.png" /></p>

]]></content>
      <categories>
        
          <category> Javascript </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Javascript Object]]></title>
      <url>/javascript/2020/11/17/javascript_object/</url>
      <content type="html"><![CDATA[<h3 id="definition">Definition:</h3>
<ul>
  <li>Unordered data collection</li>
  <li>Key-Value Pair collection</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span><span class="p">:</span><span class="mi">18</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">({</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">})</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">:</span><span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span><span class="p">:</span> <span class="mi">18</span><span class="p">})</span>
</code></pre></div></div>

<h3 id="details">Details</h3>
<ul>
  <li>key name should is string, not identifier, it can include any characters</li>
  <li>quotation mark can be omitted, after omitting the quotation mark, the key name can only be represented according to the rules of the identifier</li>
  <li>when you omit the quotation mark, the key name is also string</li>
  <li>Each key is the property name of a object</li>
  <li>Each value is the property value of a object
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">[</span><span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">100</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">255</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">3.2</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">0.01</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">0.234</span><span class="dl">"</span><span class="p">]</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// can get all the keys of that obj</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="variable-as-property-name">Variable as Property name</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">xxx</span><span class="dl">'</span>
  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">:</span> <span class="mi">111</span><span class="p">}</span>
  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{[</span><span class="nx">a</span><span class="p">]:</span> <span class="mi">1111</span><span class="p">}</span> <span class="o">===</span> <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">xxx</span><span class="p">:</span> <span class="mi">1111</span><span class="p">}</span>
</code></pre></div></div>
<ul>
  <li><strong>How to use variables as property name?</strong>
    <ul>
      <li>Previously we use constant as the property name</li>
      <li><code class="language-plaintext highlighter-rouge">let p1 = 'name'</code></li>
      <li><code class="language-plaintext highlighter-rouge">let obj = {p1: 'frank'}</code> here, the property name is <code class="language-plaintext highlighter-rouge">'p1'</code></li>
      <li><code class="language-plaintext highlighter-rouge">let obj = {[p1]: 'frank'}</code> here, the property name is <code class="language-plaintext highlighter-rouge">'name'</code></li>
    </ul>
  </li>
  <li>Compare:
    <ul>
      <li>if there is no [], the property name will automatically become the string</li>
      <li>if add [], the property will try to find the value inside of the []</li>
      <li>if the property name is not a string, it will be automatically transformed into a string</li>
    </ul>
  </li>
  <li>Five Falsy Values
    <ul>
      <li>null, undefined, 0, NaN, ‘’</li>
    </ul>
  </li>
  <li>7 data types
    <ul>
      <li>number</li>
      <li>string</li>
      <li>bool</li>
      <li>symbol</li>
      <li>null</li>
      <li>undefined</li>
      <li>object</li>
    </ul>
  </li>
</ul>

<h3 id="the-hidden-property-in-the-object">The hidden Property in the Object</h3>
<blockquote>
  <p><img src="../../../../../assets/images/hiddenObjectProperty.png" width="500" alt="hidden Object Property" /></p>

</blockquote>

<h3 id="delete-property">Delete Property</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="kc">undefined</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="c1">// result: {name: undefined, age: 18}</span>

<span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="c1">// result: {age: 18}</span>

<span class="k">delete</span> <span class="nx">obj</span><span class="p">[</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">]</span>
<span class="c1">// result: true</span>

<span class="c1">// check if you have deleted the property successfully or not</span>
<span class="c1">// true =&gt; property exists, false =&gt; property not exists</span>
<span class="dl">'</span><span class="s1">name</span><span class="dl">'</span> <span class="k">in</span> <span class="nx">obj</span>

<span class="nx">name</span> <span class="k">in</span> <span class="nx">obj</span>
<span class="c1">// result: false</span>
<span class="c1">// because name and 'name' are different things,</span>
<span class="c1">// we have never declared or defined or assigned any value to name before</span>
<span class="c1">// name without ''  is a variable</span>
</code></pre></div></div>
<blockquote>
  <p><img src="../../../../../assets/images/DeleteProperty.png" width="500" alt="Delete Property" /></p>
</blockquote>

<h3 id="read-property">Read Property</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="c1">//result: (2)["name","age"]</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="c1">//result: (2)["frank","18"]</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="c1">//result:</span>
<span class="c1">// (2) [Array(2), Array(2)]</span>
<span class="c1">// 0: (2) ["name", "frank"]</span>
<span class="c1">// 1: (2) ["age", 18]</span>
<span class="c1">// length: 2</span>
<span class="c1">// __proto__: Array(0)</span>
</code></pre></div></div>

<p><strong>When you want to see all the properties in a object, please use  <code class="language-plaintext highlighter-rouge">Console.dir()</code>  to print out all the properties.</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">}</span>
<span class="kc">undefined</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
<span class="nx">VM301</span><span class="p">:</span><span class="mi">1</span>
<span class="nb">Object</span>
  <span class="nx">age</span><span class="p">:</span> <span class="mi">18</span>
  <span class="nx">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">frank</span><span class="dl">"</span>
  <span class="nx">__proto__</span><span class="p">:</span>
  <span class="kd">constructor</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nb">Object</span><span class="p">()</span>
  <span class="nx">hasOwnProperty</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">hasOwnProperty</span><span class="p">()</span>
  <span class="nx">isPrototypeOf</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">isPrototypeOf</span><span class="p">()</span>
  <span class="nx">propertyIsEnumerable</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">propertyIsEnumerable</span><span class="p">()</span>
  <span class="nx">toLocaleString</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">toLocaleString</span><span class="p">()</span>
  <span class="nx">toString</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">toString</span><span class="p">()</span>
  <span class="nx">valueOf</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">valueOf</span><span class="p">()</span>
  <span class="nx">__defineGetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__defineGetter__</span><span class="p">()</span>
  <span class="nx">__defineSetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__defineSetter__</span><span class="p">()</span>
  <span class="nx">__lookupGetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__lookupGetter__</span><span class="p">()</span>
  <span class="nx">__lookupSetter__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__lookupSetter__</span><span class="p">()</span>
  <span class="kd">get</span> <span class="nx">__proto__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__proto__</span><span class="p">()</span>
  <span class="kd">set</span> <span class="nx">__proto__</span><span class="p">:</span> <span class="nx">ƒ</span> <span class="nx">__proto__</span><span class="p">()</span>
</code></pre></div></div>
<blockquote>
  <p><img src="../../../../../assets/images/CheckAllProperties.png" width="500" alt="Check All Properties" /></p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">toString</span><span class="dl">'</span><span class="p">)</span>  <span class="c1">//result: false</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">)</span>  <span class="c1">//result: true</span>
</code></pre></div></div>

<h3 id="more-explanation-about-prototype">More Explanation about Prototype</h3>
<blockquote>
  <p><img src="../../../../../assets/images/Prototype.png" width="500" alt="Prototype" />
<img src="../../../../../assets/images/LookupProperty.png" width="500" alt="Look up Prototype" />
<img src="../../../../../assets/images/Emphasis.png" width="500" alt="Emphasis property" />
<img src="../../../../../assets/images/Emphasis2.png" width="500" alt="Emphasis property2" /></p>
</blockquote>

<h3 id="add-or-modify-property-values">Add or Modify Property Values</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// direct assign value</span>
  <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">}</span>  <span class="c1">//'name' is a string</span>
  <span class="kd">let</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span>  <span class="c1">//'name' is a string</span>
  <span class="nx">obj</span><span class="p">[</span><span class="dl">'</span><span class="s1">na</span><span class="dl">'</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span>
  <span class="kd">let</span> <span class="nx">key</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">;</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span>

  <span class="c1">//assign value in batches</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="na">p1</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="na">p2</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="na">p3</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span> <span class="na">p4</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span> <span class="na">p5</span><span class="p">:</span> <span class="mi">5</span><span class="p">})</span>
</code></pre></div></div>

<h3 id="add-or-modify-prototype---common-properties">Add or Modify Prototype - <strong>Common Properties</strong></h3>
<ul>
  <li>
    <h4 id="we-cannot-modify-or-add-common-properties-by-object-itself">We cannot modify or add common Properties by object itself</h4>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span> <span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">// they have common 'toString'</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">xxx</span><span class="dl">'</span>
<span class="c1">// you can change the toString value of the Object  obj, but this toString property now only belongs to obj, not belongs to any other Object like obj2</span>

<span class="nx">obj2</span><span class="p">.</span><span class="nx">toString</span>  <span class="c1">// it still on the common properties</span>
</code></pre></div>    </div>
  </li>
  <li>
    <h4 id="if-you-insist-to-modify-or-add-value-to-the-prototype-common-property">If you insist to modify or add value to the Prototype (Common Property)</h4>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">xxx</span><span class="dl">'</span>  <span class="c1">//not recommend to use __proto__</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">xxx</span><span class="dl">'</span>

<span class="c1">// ****** Generally, please don't modify the prototype, can cause a lot of problem</span>
</code></pre></div>    </div>
    <h3 id="modify-hidden-properties">Modify hidden Properties</h3>
  </li>
  <li>
    <h4 id="not-recommend-to-use-proto">Not recommend to use <strong>proto</strong></h4>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jack</span><span class="dl">'</span><span class="p">}</span>
<span class="kd">let</span> <span class="nx">common</span> <span class="o">=</span> <span class="p">{</span><span class="na">kind</span><span class="p">:</span> <span class="dl">'</span><span class="s1">human</span><span class="dl">'</span><span class="p">}</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>
<span class="nx">obj2</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">common</span>
</code></pre></div>    </div>
  </li>
  <li>
    <h4 id="recommend-to-use-objectcreate">Recommend to use <strong>Object.create()</strong></h4>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">)</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">frank</span><span class="dl">'</span>
<span class="kd">let</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">common</span><span class="p">)</span>
<span class="nx">obj2</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">jack</span><span class="dl">'</span>

<span class="c1">//规范大概的意思是，要改就一开始就改，别后来再改</span>
<span class="c1">// 需要修改本地属性的时候 如下:</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span><span class="na">p1</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span><span class="mi">2</span><span class="p">})</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>### Code Rule
<img src="../../../../../assets/images/code_rule.png" width="500" alt="Code Rule" /></p>

]]></content>
      <categories>
        
          <category> Javascript </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[The Memory Plot of Javascript]]></title>
      <url>/javascript/2020/11/09/memory_plot_of_js/</url>
      <content type="html"><![CDATA[<h3 id="execute-js-code">Execute JS code</h3>
<ul>
  <li>Preparation before execute JS code
    <ul>
      <li>Ready Work</li>
      <li>Provide API: <strong><em>window/ document/ setTimeout</em></strong></li>
      <li>Above code does not belong to JS itself</li>
      <li>We call these code as runtime env</li>
      <li>Once put JS code into the runtime env, it starts to execute JS code</li>
    </ul>
  </li>
</ul>

<h3 id="where-is-the-js-code-running">Where is the JS code running?</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Memory
</code></pre></div></div>

<h3 id="stack-and-heap">Stack and Heap</h3>
<p><img src="../../../../../assets/images/StackHeap.png" width="500" alt="Heap and Stack" /></p>

<ul>
  <li>Red area divided into Stack and Heap</li>
  <li>The data structure about a stack and heap will be talked later</li>
  <li>Stack: Each data stored in order</li>
  <li>Heap: Each data stored randomly
    <blockquote>
      <p>Rules:</p>
      <ul>
        <li>There are two data types: Object and non-object</li>
        <li>Non-Object stores in the Stack</li>
        <li>Object stores in the Heap</li>
        <li>’=’ operator always copy right content to left</li>
        <li>
          <p>Example(When the value has been changed):</p>

          <p><img src="../../../../../assets/images/Change_Value.png" width="500" alt="Change Value" />
 <img src="../../../../../assets/images/window_picture1.png" width="500" alt="Window in memory" />
 <img src="../../../../../assets/images/window_picture2.png" width="500" alt="Window in memory 2" /></p>
        </li>
      </ul>
    </blockquote>
  </li>
</ul>

<h3 id="when-you-need-to-know-the-structure-of-a-function">When you need to know the structure of a function</h3>
<ul>
  <li>use <code class="language-plaintext highlighter-rouge">console.dir(window.Object)</code></li>
</ul>

<h3 id="what-the-difference-between-__proto__-and-prototype">What the difference between __proto__ and prototype?</h3>
<ul>
  <li>Both of then store the address of the prototype</li>
  <li>However, prototype only exists in functions</li>
  <li>__proto__ exists in every new object</li>
</ul>

<p><strong><em>Important Picture Note</em></strong></p>
<blockquote>
  <p><img src="../../../../../assets/images/Prototype_Array_Object.png" width="500" alt="Change Value" /></p>
</blockquote>
]]></content>
      <categories>
        
          <category> Javascript </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[HTTP]]></title>
      <url>/http/2020/11/05/http_note/</url>
      <content type="html"><![CDATA[<h3 id="1-url-contains-what-what-is-the-function-of-each-part-of-the-url">1. URL contains what? What is the function of each part of the URL?</h3>
<p><code class="language-plaintext highlighter-rouge">URL =&gt; Uniform Resource Locator</code></p>

<p><strong>Hosting:</strong></p>
<blockquote>
  <p>Means that all the web pages and their supporting files are available on that computer. The web server will send any web page from the website it is hosting to any user’s browser, per user request.</p>
</blockquote>

<p><strong>Perfect Explanation of Webpage and Web Server:</strong></p>
<blockquote>
  <p>Don’t confuse websites and web servers. For example, if you hear someone say, “My website is not responding”, it actually means that the web server is not responding and therefore the website is not available. More importantly, since a web server can host multiple websites, the term web server is never used to designate a website, as it could cause great confusion. In our previous example, if we said, “My web server is not responding”, it means that multiple websites on that web server are not available.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Read Articles Below!!!
</code></pre></div></div>

<ol>
  <li><a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/How_does_the_Internet_work">How does the Internet work?</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Pages_sites_servers_and_search_engines">What is the difference between webpage, website, web server, and search engine?</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_web_server">What is a web server?</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_hyperlinks">What are hyperlinks? The concepts behind links on the web.</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL">What is a URL?</a></li>
  <li><a href="https://stackoverflow.com/questions/4913343/what-is-the-difference-between-uri-url-and-urn">What is the difference between URI, URL and URN?</a></li>
</ol>

<p><img src="../../../../../assets/images/URL_components.png" width="500" alt="URL Components" />
<img src="../../../../../assets/images/URL_Example.png" width="500" alt="URL Example" /></p>

<h3 id="2-what-the-function-of-dns-how-to-use-nslookup-command">2. What the function of DNS? How to use <strong><em>nslookup</em></strong> command?</h3>
<blockquote>
  <p>The domain name system resolves the names of internet sites with their underlying IP addresses adding efficiency and even security in the process.</p>
</blockquote>

<blockquote>
  <p>Think of DNS like your smartphone’s contact list, which matches people’s name with their phone numbers and email addresses. Then multiply that contact list by everyone else on the planet.
Example:</p>
  <ul>
    <li><strong><em>nslookup  baidu.com</em></strong>
      <blockquote>
        <ul>
          <li>Server:	192.168.0.1  Address:	192.168.0.1#53</li>
        </ul>
      </blockquote>
      <ul>
        <li>Non-authoritative answer:
          <blockquote>
            <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Name:	baidu.com Address: 220.181.38.148
</code></pre></div>            </div>
          </blockquote>
          <ul>
            <li>Name:	baidu.com Address: 39.156.69.79</li>
          </ul>
        </li>
      </ul>
    </li>
    <li><strong><em>nslookup  google.com</em></strong>
      <blockquote>
        <ul>
          <li>Server:		192.168.0.1 Address:	192.168.0.1#53</li>
        </ul>
      </blockquote>
      <ul>
        <li>Non-authoritative answer:
          <blockquote>
            <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Name:	google.com Address: 172.217.5.14
</code></pre></div>            </div>
          </blockquote>
        </li>
      </ul>
    </li>
    <li><strong><em>nslookup  github.com</em></strong>
      <blockquote>
        <ul>
          <li>Server:		192.168.0.1 Address:	192.168.0.1#53</li>
        </ul>
      </blockquote>
      <ul>
        <li>Non-authoritative answer:
          <blockquote>
            <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Name:	github.com Address: 140.82.112.4
</code></pre></div>            </div>
          </blockquote>
        </li>
      </ul>
    </li>
    <li><strong><em>nslookup  yueran-yu.github.io</em></strong>
      <blockquote>
        <ul>
          <li>SServer:		192.168.0.1 Address:	192.168.0.1#53</li>
        </ul>
      </blockquote>
      <ul>
        <li>Non-authoritative answer:
          <blockquote>
            <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Name:	yueran-yu.github.io Address: 185.199.110.153
</code></pre></div>            </div>
          </blockquote>
          <ul>
            <li>Name:	yueran-yu.github.io Address: 185.199.108.153</li>
            <li>Name:	yueran-yu.github.io Address: 185.199.109.153</li>
            <li>Name:	yueran-yu.github.io Address: 185.199.111.153</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>

</blockquote>

<h3 id="3-what-the-ip-used-for-how-to-use-ping">3. What the IP used for? How to use ping?</h3>
<blockquote>
  <p>An IP address allows information to be sent and received by the correct parties,
which means they can also be used to track down a user’s physical location.</p>
  <ul>
    <li>Some special IP
      <blockquote>
        <ul>
          <li>127.0.0.1 represent your laptop itself</li>
        </ul>
      </blockquote>
      <ul>
        <li>localhost: this is a hostname that refers to the current computer used to access it.</li>
        <li>0.0.0.0 doesn’t represent any devices.</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h3 id="4-what-is-domain-whats-the-type-of-domain">4. What is Domain, what’s the type of Domain?</h3>
<blockquote>
  <p>A domain name is your website name. A domain name is the address where Internet users can access your website. A domain name is used for finding and identifying computers on the Internet. Computers use IP addresses, which are a series of number. However, it is difficult for humans to remember strings of numbers. Because of this, domain names were developed and used to identify entities on the Internet rather than using IP addresses.</p>
</blockquote>

<h4 id="knowledge-points">Knowledge Points</h4>
<blockquote>
  <ul>
    <li>A domain name can correspond to different IPs.
      <blockquote>
        <ul>
          <li>This is called load balance to prevent one machine from breaking down.</li>
        </ul>
      </blockquote>
    </li>
    <li>One IP corresponds to a different domain name.
      <blockquote>
        <ul>
          <li>This is called a Shared host, and poor developers do it.</li>
        </ul>
      </blockquote>
    </li>
  </ul>
</blockquote>

<p><img src="../../../../../assets/images/Domain_name.png" width="500" alt="Domain Name" /></p>

<h3 id="http-request--response">HTTP Request &amp; Response</h3>
<p>You can read the article in MDN as well: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages">HTTP Messages</a></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">url</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">port</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">请指定端口号好不啦？</span><span class="se">\n</span><span class="s1">node server.js 8888 这样不会吗？</span><span class="dl">'</span><span class="p">)</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">parsedUrl</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
  <span class="kd">var</span> <span class="nx">pathWithQuery</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span>
  <span class="kd">var</span> <span class="nx">queryString</span> <span class="o">=</span> <span class="dl">''</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">pathWithQuery</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">'</span><span class="s1">?</span><span class="dl">'</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="nx">queryString</span> <span class="o">=</span> <span class="nx">pathWithQuery</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">pathWithQuery</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="dl">'</span><span class="s1">?</span><span class="dl">'</span><span class="p">))</span> <span class="p">}</span>
  <span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">parsedUrl</span><span class="p">.</span><span class="nx">pathname</span>
  <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="nx">parsedUrl</span><span class="p">.</span><span class="nx">query</span>
  <span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">method</span>

  <span class="cm">/******** 从这里开始看，上面不要看 ************/</span>

  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">有个傻子发请求过来啦！路径（带查询参数）为：</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">pathWithQuery</span><span class="p">)</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/html;charset=utf-8</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">`二哈`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">/x</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/css;charset=utf-8</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">`body{color: red;}\n`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">404</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/html;charset=utf-8</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">`你输入的路径不存在对应的内容`</span><span class="p">)</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="cm">/******** 代码结束，下面不要看 ************/</span>
<span class="p">})</span>
<span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">监听 </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">port</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> 成功</span><span class="se">\n</span><span class="s1">请用在空中转体720度然后用电饭煲打开 http://localhost:</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">port</span><span class="p">)</span>
</code></pre></div></div>
<blockquote>
  <h4 id="logic">Logic:</h4>
  <ul>
    <li>According to the path and return back a string</li>
    <li>Every time when you receive a request, the middle part code will be executed</li>
    <li>Use <code class="language-plaintext highlighter-rouge">if else</code> to choose the path, and return the response</li>
    <li>Return status code <code class="language-plaintext highlighter-rouge">200</code> if it is a known path</li>
    <li>Return status code <code class="language-plaintext highlighter-rouge">404</code> if the is an unknown path</li>
    <li><code class="language-plaintext highlighter-rouge">Content-Type</code> represents <code class="language-plaintext highlighter-rouge">Type/Grammar</code> of the content</li>
    <li><code class="language-plaintext highlighter-rouge">response.write()</code> represents the return content</li>
    <li><code class="language-plaintext highlighter-rouge">response.end()</code> represents when execute this code, the response will send to the user immediately</li>
  </ul>
</blockquote>

<h4 id="important">IMPORTANT!!!</h4>
<blockquote>
  <p>The function of file suffix is to facilitate the identification of applications on the operating system, front-end request or response code in the identification of files don’t rely on suffixes</p>

  <p>For example, as long as the content of the file is CSS code, the file suffix can be un.css</p>
</blockquote>

<h3 id="attention">Attention</h3>
<p><img src="../../../../../assets/images/server_runnng_state1.png" width="800" alt="Checking request details in Network" />
<img src="../../../../../assets/images/Response.png" width="500" alt="Attention" />
<img src="../../../../../assets/images/request.png" width="500" alt="When Request" />
<img src="../../../../../assets/images/response_.png" width="500" alt="When Response" /></p>

]]></content>
      <categories>
        
          <category> http </category>
        
      </categories>
      <tags>
        
          <tag> back end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Wrap Up of CSS]]></title>
      <url>/html%20and%20css/2020/10/25/wrap_up_of_css/</url>
      <content type="html"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>★ You can Try To Find More Practice Materials Online~~~ For Example: Flexbox Froggy
</code></pre></div></div>

<h3 id="layout">Layout</h3>
<ol>
  <li>The fixed width: the width always is 960/ 1000 / 1024 px</li>
  <li>Not Fixed Width: mainly depends on normal flow layout
    <ul>
      <li>The Normal Flow is automatically fitted, no more extra style</li>
    </ul>
  </li>
  <li>Responsive Layout
    <ul>
      <li>Which means the width fix in the PC, but not fix in the mobile phone</li>
      <li>In other words, mixed layout</li>
    </ul>
  </li>
</ol>

<p><img src="../../../../../assets/images/CSS_Deploy.png" width="500" alt="CSS Layout Flow Chart" /></p>

<h3 id="float">Float</h3>
<ul>
  <li>Add  <strong><em>float:left</em></strong> and <strong><em>width</em></strong> in the children elements</li>
  <li>Add <strong><em>.clearfix</em></strong> in the parent element</li>
</ul>

<h3 id="important-to-remember---flex">Important To Remember - Flex</h3>
<ul>
  <li>display:flex;</li>
  <li>flex-direction:row/column</li>
  <li>flex-wrap: wrap</li>
  <li>just-content:center / space-between</li>
  <li>align-items:center</li>
  <li>(These are basic use in work environment)</li>
</ul>

<h3 id="regular-sketch-tools">Regular sketch tools</h3>
<p><img src="../../../../../assets/images/sketch_tools.png" width="300" alt="Sketch Tools" /></p>

<h3 id="grid">Grid</h3>
<ul>
  <li>Shortcut to create multiple classes
    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.a+.b+.c+.d  -&gt; press tab
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="one-picture-shows-the-div-layout">One picture shows the div layout</h3>
<p><img src="../../../../../assets/images/div_layout.png" width="500" alt="DIV Layout" /></p>

<h3 id="z-index">z-index</h3>
<p>The z-index CSS property of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.</p>

<p>For a positioned box(that is, one with any position other than static), the z-index property specifies:</p>
<ol>
  <li>The stack level of the box in the current stacking context.</li>
  <li>z-index in the current stacking context level has no interaction with other stack level.</li>
  <li>z-index in the same stack level can be compared.</li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context">Stacking Content Reference</a></li>
</ol>

<h3 id="shortcut-to-call-console">Shortcut to call ‘Console’</h3>
<ul>
  <li>In any tab, press  ESC</li>
</ul>

<h3 id="the-process-of-the-browser-rendering">The Process of the Browser Rendering</h3>
<p><strong><em>Step:</em></strong></p>
<ol>
  <li>According to the HTML to construct the HTML Tree(DOM)</li>
  <li>According to the CSS construct the CSS Tree</li>
  <li>Merge two trees into one Rendering Tree</li>
  <li>Layout (Normal Flow, Box Model, Calculate Size and Position)</li>
  <li>Painting (Draw out the border color, font color, shadow)</li>
  <li>Finally compose all the parts together</li>
</ol>

<h3 id="rendering-performance-cramming">Rendering Performance (Cramming)</h3>
<ol>
  <li><strong>Optimizing Javascript Execution</strong>
    <ul>
      <li>Avoid setTimeout or <strong><em>setInterval</em></strong> for visual updates; always use <strong><em>requestAnimationFrame</em></strong> instead.</li>
      <li>Move long-running Javascript off the main thread to Web Workers.</li>
      <li>Use micro-tasks to make DOM changes over several frames.</li>
      <li>Use Chrome DevTools’ Timeline and Javascript Profiler to assess the impact of Javascript.</li>
    </ul>
  </li>
  <li><strong>Reduce the Scope and Complexity of Style Calculations</strong>
    <ul>
      <li>Reduce the complexity of your selectors; use a class-centric methodology like BEM.</li>
      <li>Reduce the number of elements on which style calculation must be calculated.</li>
    </ul>
  </li>
  <li><strong>Avoid Large, Complex Layouts and Layout Thrashing</strong>
    <ul>
      <li>Similarly to style calculations, the immediate concerns for layout cost are:
        <ul>
          <li>The number of elements that require layout.</li>
          <li>The complexity of those layouts.</li>
        </ul>
      </li>
      <li>Layout is normally scoped to the whole document.</li>
      <li>The number of DOM elements will affect performance; you should avoid triggering layout wherever possible.</li>
      <li>Assess layout model performance; new Flexbox is typically faster than older Flexbox or float-based layout models.</li>
      <li>Avoid forced synchronous layouts and layout thrashing; read style values then make style changes.</li>
    </ul>
  </li>
  <li><strong>Simplify Paint Complexity and Reduce Paint Areas</strong>
    <ul>
      <li>Changing any property apart from transforms or opacity always triggers paint.</li>
      <li>Paint is often the most expensive part of the pixel pipeline; avoid it where you can.</li>
      <li>Reduce paint areas through layer promotion and orchestration of animations.</li>
      <li>Use the Chrome DevTools paint profiler to assess paint complexity and cost; reduce where you can.</li>
    </ul>
  </li>
  <li><strong>Stick to Compositor-Only Properties and Manage Layer Count</strong>
    <ul>
      <li>Stick to transform and opacity changes for your animations.</li>
      <li>Promote moving elements with <strong><em>will-change</em></strong> or <strong><em>translateZ</em></strong>.</li>
      <li>Avoid overusing promotion rules; layers require memory and management.</li>
    </ul>
  </li>
  <li><strong>Debounce Your Input Handlers</strong>
    <ul>
      <li>Avoid long-running input handlers; they can block scrolling.</li>
      <li>Do not make style changes in input handlers.</li>
      <li>Debounce your handlers; store event values and deal with style changes in the next requestAnimationFrame callback.</li>
    </ul>
  </li>
</ol>

<h3 id="how-to-debug-the-hover-effect">How to Debug the <strong><em>[Hover]</em></strong> Effect</h3>
<ul>
  <li>Open DevTools</li>
  <li>In the Style Tab, find out [:hov] in the top right conner and click it</li>
  <li>Check [:hover]</li>
  <li>Find out <code class="language-plaintext highlighter-rouge">#demo:hover{transform: translateX(50px)}</code></li>
  <li>Press <strong>UP</strong> or <strong>DOWN</strong> key to see the demo box moving 1px each time consecutively</li>
  <li>Press <strong>Shift</strong> + <strong>UP</strong> or <strong>DOWN</strong> , the demo box will move 10px each time consecutively</li>
</ul>

<h3 id="how-to-use-transform-to-center-the-box-cramming">How to Use Transform to Center the Box (Cramming)</h3>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.wrapper1</span>
<span class="p">{</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">5px</span> <span class="nb">solid</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">600px</span><span class="p">;</span>
  <span class="p">}</span>

<span class="nf">#demo1</span>
<span class="p">{</span>
<span class="nl">width</span><span class="p">:</span><span class="m">200px</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span><span class="m">200px</span><span class="p">;</span>
<span class="nl">border</span><span class="p">:</span><span class="m">1px</span> <span class="nb">solid</span> <span class="no">green</span><span class="p">;</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">left</span><span class="p">:</span><span class="m">50%</span><span class="p">;</span>
<span class="nl">top</span><span class="p">:</span><span class="m">50%</span><span class="p">;</span>
<span class="nl">transform</span><span class="p">:</span> <span class="n">translateX</span><span class="p">(</span><span class="m">-50%</span> <span class="m">-50%</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="transition">Transition</h3>
<ul>
  <li>Not all the properties can use transition</li>
  <li>Display:none =&gt; block can not be transited</li>
  <li>Should use <strong><em>visibility:hidden =&gt; visible</em></strong> instead</li>
  <li>Background and Opacity can use transition</li>
</ul>

<h3 id="animation---keyframe-syntax">Animation - KeyFrame Syntax</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Animation:
   time ||
   timing-function = linear ||
   single-animation-iteration-count = infinite||
   single-animation-direction = normal, reverse...||
   single-animation-fill-mode = none, forwards, backwards ||
   single-animation-play-state = running, paused ||
   keyframes-name
</code></pre></div></div>
]]></content>
      <categories>
        
          <category> HTML and CSS </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Usage of 'a' Tag]]></title>
      <url>/html%20and%20css/2020/10/16/usage_of_a_tag/</url>
      <content type="html"><![CDATA[<h3 id="1-href">1. href</h3>

<h4 id="1-linking-to-relative-urls">(1) Linking to relative URLs</h4>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href= </span><span class="s">"//google.com"</span><span class="nt">&gt;</span>Go To Google<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Q: Why use '//google.com' instead of 'https://www.google.com' and 'http://www.google.com?'
A: Because '//' can automatically recognize if the website using the 'https' or 'http' protocol.
</code></pre></div></div>

<h4 id="2-jump-to-one-point-of-the-same-html-page">(2) Jump to one point of the same html page</h4>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;p&gt;</span>1<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>2<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>3<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>4<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>5<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">"xxx"</span><span class="nt">&gt;</span>6<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>7<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>8<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>9<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href= </span><span class="s">"#xxx"</span><span class="nt">&gt;</span>Go To 6<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>You can locate one point in the same html page by using a id tag in the href.
</code></pre></div></div>

<h4 id="3-linking-to--email-or-telephone">(3) Linking to  email or telephone</h4>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"mailto:librayuyue@163.com"</span><span class="nt">&gt;</span>Send Email to Me<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"tel:2032123212"</span> <span class="na">target=</span><span class="s">"_self"</span><span class="nt">&gt;</span>Send Message to Me<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div>

<h3 id="2-target">2. target</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1) "_self" is a default value of target, it will open the new page based on current page.
(2) "_blank" usually a ne tab
(3) "_parent" the parent browsing context of the current one. If no parent, behaves as _self.
(4) "_top" the topmost browsing context(the "highest" context that's an ancestor of the current one.) if no ancestors, behaves as _self.
</code></pre></div></div>

<h3 id="3-download">3. download</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MDN Quote: "Prompts the user to save the linekd URL instead of nabigating to it. Can be used with or without a value."
</code></pre></div></div>

<h3 id="4-rel--noopener">4. rel = noopener</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Not important
</code></pre></div></div>

<h2 id="the-usage-of-img-tag">The Usage of ‘img’ Tag</h2>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;img</span> <span class="na">id=</span><span class="s">xxx</span> <span class="na">src=</span><span class="s">"dog.png"</span> <span class="na">alt=</span><span class="s">"one dog"</span><span class="nt">&gt;</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1) The 'src' attribute is required. It contains the path to the image you want to embed.
(2) 'alt' attribute holds a text description of the image. When the image failed to load, the alt text will be displayed.
(3) 'max-width: 100%;' it sets the maximum width of an element. It prevents the used value of the width property from becoming larger than the value specified by max-width.
</code></pre></div></div>

<h2 id="the-usage-of-table-tag">The Usage of ‘table’ Tag</h2>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table&gt;</span>
    <span class="nt">&lt;thead&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;th&gt;</span>English<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;th&gt;</span>Translate<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/thead&gt;</span>
    <span class="nt">&lt;tbody&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span>Hyper<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span>超级<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span>Target<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span>目标<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span>Reference<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span>引用 <span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/tbody&gt;</span>
    <span class="nt">&lt;tfoot&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;td&gt;</span>空<span class="nt">&lt;/td&gt;</span>
        <span class="nt">&lt;td&gt;</span>空<span class="nt">&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/tfoot&gt;</span>
  <span class="nt">&lt;/table&gt;</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'table' contains 'thead', 'tbody' and 'tfoot'. These three tags can change the order but the browser will consistently display them in the default order.
</code></pre></div></div>

<h2 id="other-thoughts">Other Thoughts</h2>
<h3 id="the-use-of-javascript-pseudo-code"><em>The Use of javascript:; （pseudo code）</em></h3>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;p&gt;&lt;a</span> <span class="na">href=</span><span class="s">"javascript: alert(1);"</span><span class="nt">&gt;</span>javascript pseudo protocols.<span class="nt">&lt;/a&gt;&lt;/p&gt;</span>
 <span class="nt">&lt;p&gt;&lt;a</span> <span class="na">href=</span><span class="s">"javascript:;"</span><span class="nt">&gt;</span>click<span class="nt">&lt;/a&gt;&lt;/p&gt;</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>When click the second link, the page will not refreshed and there is no new record in the network tab. But the click effect is still work.
</code></pre></div></div>

<h3 id="the-difference-between-input-and-button"><em>The difference between ‘input’ and ‘button’</em></h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>you can not put any other thing inside the input tag, while you can put something like 'strong','em' or even 'img' tag inside a button tag.
</code></pre></div></div>

]]></content>
      <categories>
        
          <category> HTML and CSS </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[HTML &CSS Notes]]></title>
      <url>/html%20and%20css/2020/10/13/html_css_notes/</url>
      <content type="html"><![CDATA[<h3 id="shortcut-to-create-the-ul-list">Shortcut to create the ul list</h3>
<ol>
  <li>select many lines</li>
  <li>in the vscode，press ‘command +shift + p’ together</li>
  <li>then search ‘emmet wrap’</li>
  <li>Select ‘individual line with abbreviation’</li>
  <li>enter  ‘ul&gt;li*’</li>
</ol>

<h3 id="mbp-delete-shortcut">MBP delete Shortcut</h3>
<ul>
  <li><strong>option + delete:</strong>
    <ul>
      <li>delete one sentence or a word before the cursor</li>
    </ul>
  </li>
  <li><strong>command + delete:</strong>
    <ul>
      <li>delete a whole line sentence</li>
    </ul>
  </li>
  <li><strong>fn + delete:</strong>
    <ul>
      <li>delete the word after the cursor</li>
    </ul>
  </li>
</ul>

<h3 id="when-add-photos">When add Photos</h3>
<ul>
  <li>Don’t transform the pictures, can’t set the width and height at the same time.</li>
  <li>You can use the online tool to reshape the proportion of the pictures</li>
  <li>If the size of the picture is too big( over 300kb), compress the picture to smaller size.</li>
</ul>

<h3 id="how-to-make-the-webpage-compatible-with-the-mobile-phone">How to make the webpage compatible with the mobile phone.</h3>
<ul>
  <li>add ‘meta:vp’ (tab) and ‘img max-width’</li>
</ul>

<h3 id="use-wifi-test-the-webpage-in-mobile-phone">Use WIFI test the webpage in mobile phone</h3>
<ol>
  <li>keep the mobile and the laptop within the same WIFI</li>
  <li>you can use the IP and port to visit the laptop directly</li>
  <li>Which IP address you can use? Try through all the IP addresses the http-server give to you.</li>
</ol>

<h3 id="️-tips-when-search-in-chrome">⭐️ Tips: when search in Chrome</h3>
<ul>
  <li>For example: search keywords =&gt;”chrome remote debug -csdn”,  the “-csdn” means  remove all the information source from the CSDN website.</li>
</ul>

<h3 id="️-open-the-inspect">⭐️ Open the ‘Inspect’</h3>
<ul>
  <li>cmd + option + J</li>
</ul>

<h3 id="systematic-learning">Systematic Learning</h3>
<h4 id="what-you-need-to-get-the-hang-of-when-you-learn-a-new-language">What you need to get the Hang of when you learn a new language?</h4>
<ol>
  <li>grammar - know how to code</li>
  <li>debug - know where is wrong</li>
  <li>Look up reference materials - copy code</li>
  <li>Who is the standard maker?</li>
</ol>

<h4 id="how-to-learn">How to learn?</h4>
<ol>
  <li>Copy - Copy document, and copy teacher</li>
  <li>Run - running the code in your self compiler</li>
  <li>Modify - infuse your own thought and run again</li>
</ol>

<h4 id="css-grammar">CSS Grammar</h4>
<ul>
  <li><em>@charset “UTF-8”</em></li>
  <li><em>@import url(2.css);</em></li>
  <li><em>@media (min-width: 100px) and (max-width: 200px){ … }</em></li>
</ul>

<blockquote>
  <p>Attention:</p>
  <ol>
    <li>@charset must in the first line</li>
    <li>the first two grammars must end with semicolon</li>
    <li>@media is a unique block of knowledge</li>
    <li>charset means  “character sets”</li>
    <li>UTF-8 is a compromise character encoding that can be as compact as ASCII (if the file is just plain English text) but can also contain any unicode characters (with some increase in file size).</li>
  </ol>
</blockquote>

<h4 id="where-can-you-find-the-material-of-css">Where can you find the material of CSS?</h4>
<blockquote>
  <ul>
    <li>Google keywords + MDN</li>
    <li>CSS Tricks</li>
    <li>张鑫旭博客</li>
  </ul>
</blockquote>

<h4 id="where-can-i-find-the-practice-material">Where Can I find the practice material?</h4>
<ul>
  <li><strong><em>PSD</em></strong>
    <ul>
      <li>Freepik, search PSD =&gt; search “web”</li>
      <li>365PSD UI set</li>
    </ul>
  </li>
  <li><strong><em>Effective Pictures</em></strong>(NOT provide download)
    <ul>
      <li>dribbble.com: top designer community =&gt; search “web”</li>
      <li>Imitate by eye</li>
    </ul>
  </li>
  <li><strong><em>E-Commerce Website</em></strong>
    <ul>
      <li>directly imitate</li>
    </ul>
  </li>
</ul>

<p><strong><em>Important!!! DON’T OBSESSED WITH IMITATION!!!</em></strong></p>
<blockquote>
  <p>Only imitate no more than two PC website, phone website, UI set. Useless to do more imitation.</p>
</blockquote>

<h3 id="normal-flow">Normal Flow</h3>
<blockquote>
  <ul>
    <li>Flow Direction
      <blockquote>
        <ul>
          <li>inline element direct from left to right, it will change line until to the rightmost.</li>
          <li>block element direct from up to down, each block belongs to a line</li>
          <li>inline-block direct from left to right, but it will never separate itself into two lines if it’s at the line end.</li>
        </ul>
      </blockquote>
    </li>
  </ul>

  <p><strong><em>IMPORTANT!!! Don’t put a block element inside a inline element!!!</em></strong></p>
  <ul>
    <li>Width
      <blockquote>
        <ul>
          <li>the width of inline element is the sum of all elements inside the inline element, can’t use width</li>
          <li>block will default calculate the width, can assign value to width</li>
          <li>inline-block combine the merits of inline and block, can assign value to width</li>
          <li>shortcut to create multiple span =&gt; span.id{The number is} *</li>
        </ul>
      </blockquote>
      <ul>
        <li><strong><em>IMPORTANT!!! Never give a div element “width=100%;”</em></strong></li>
      </ul>
    </li>
    <li>Height
      <blockquote>
        <ul>
          <li>The height of inline can be decided by the line-height</li>
          <li>line-height can be inherited by the inside inline element</li>
          <li>内联元素的文字如果在滚动条所在的框里，那么框会显示文字的所有内容，不存在需要横向拉动滚动条才能看见剩余的文字情况。</li>
        </ul>
      </blockquote>
    </li>
  </ul>
</blockquote>

<h3 id="overflow">Overflow</h3>
<ul>
  <li>When content more than a container area, it will overflow</li>
  <li>overflow: auto - based one the content to display the scroll bar or not</li>
  <li>overflow: scroll - always display scroll bar</li>
  <li>overflow: hidden - hidden the overflow part</li>
  <li>overflow: visible - show all the content even it is out of the box</li>
</ul>

<h3 id="box-model">BOX Model</h3>
<p><img src="../../../../../assets/images/box.png" width="500" alt="box model" /></p>
<blockquote>
  <ul>
    <li>Content-Box
      <blockquote>
        <ul>
          <li>Content is the yardstick of a border</li>
          <li>content-box width = content width</li>
        </ul>
      </blockquote>
    </li>
    <li>Border-Box
      <blockquote>
        <ul>
          <li>Border is the yardstick of a border</li>
          <li>border-box width = content width + padding + border</li>
        </ul>
      </blockquote>
    </li>
  </ul>

  <p>Which one is better to use?</p>
  <ul>
    <li>Border-box: including padding, border width together</li>
  </ul>
</blockquote>

<h3 id="how-to-use-alibaba-icon">How to use alibaba icon</h3>
<p><a href="https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.17&amp;helptype=code">How to Use Icon</a></p>

<h3 id="about-css-height">About CSS Height</h3>
<blockquote>
  <p>Only the innermost elements can add height, the outside elements should use padding or margin to fill in and put up the box.</p>

</blockquote>

<h3 id="css-reset-code">CSS Reset Code</h3>
<pre><code class="language-CSS">    *{box-sizing: border-box;}
    *:before, *:after{box-sizing:border-box;}
    *{margin:0; padding:0;}
    ul, ol { list-style: none;}
    a{color:inherit; text-decoration: none;}
</code></pre>

<h3 id="figma-tips">Figma Tips</h3>
<ul>
  <li>Copy a Rectangle: Mac press <code class="language-plaintext highlighter-rouge">option</code> , Win press <code class="language-plaintext highlighter-rouge">Alt</code>,then drag the original rectangle to the target place</li>
  <li>White: <code class="language-plaintext highlighter-rouge">#ffffff</code></li>
  <li>Black: <code class="language-plaintext highlighter-rouge">#000000</code></li>
  <li>Grey: <code class="language-plaintext highlighter-rouge">#EEEEEE</code></li>
  <li>Border Color: <code class="language-plaintext highlighter-rouge">dddddd</code></li>
  <li>Adjust the size of image without deformation: Press <code class="language-plaintext highlighter-rouge">shift</code> to drag image</li>
  <li>Check space or pixel between 2 rectangles:
    <ul>
      <li>Select one rectangle, press <code class="language-plaintext highlighter-rouge">option</code>, hover to another rectangle, you will see the pixel between them</li>
      <li><img src="../../../../../assets/images/check_pixel.png" width="800" alt="check_pixel.png" /></li>
    </ul>
  </li>
</ul>
]]></content>
      <categories>
        
          <category> HTML and CSS </category>
        
      </categories>
      <tags>
        
          <tag> front end </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
